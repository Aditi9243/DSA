//1.Kth node from last
//2.Mid Of Linked List
//3.Merge Two Sorted Linked Lists
//4.Special Mid - Return Node (from a start and end pt of linked list)
//5.Merge Sort A Linked List
//6.Remove Duplicates In A Sorted Linked List
//6.Remove Duplicates In A Sorted Linked List
//7.Odd Even Linked List
//8.K Reverse In Linked List
//9.Display Reverse (recursive) - Linked List
//10.Reverse Linked List (pointer - Recursive)
//11.Is Linked List A Palindrome?
//12.Fold A Linked List
//13.Intersection Point Of Linked Lists
//14.Add Two Linked Lists

import java.io.*;
import java.util.*;

public class Main {
  public static class Node {
    int data;
    Node next;
  }

  public static class LinkedList {
    Node head;
    Node tail;
    int size;

    void addLast(int val) {
      Node temp = new Node();
      temp.data = val;
      temp.next = null;

      if (size == 0) {
        head = tail = temp;
      } else {
        tail.next = temp;
        tail = temp;
      }

      size++;
    }

    public int size() {
      return size;
    }

    public void display() {
      for (Node temp = head; temp != null; temp = temp.next) {
        System.out.print(temp.data + " ");
      }
      System.out.println();
    }

    public void removeFirst() {
      if (size == 0) {
        System.out.println("List is empty");
      } else if (size == 1) {
        head = tail = null;
        size = 0;
      } else {
        head = head.next;
        size--;
      }
    }

    public int getFirst() {
      if (size == 0) {
        System.out.println("List is empty");
        return -1;
      } else {
        return head.data;
      }
    }

    public int getLast() {
      if (size == 0) {
        System.out.println("List is empty");
        return -1;
      } else {
        return tail.data;
      }
    }

    public int getAt(int idx) {
      if (size == 0) {
        System.out.println("List is empty");
        return -1;
      } else if (idx < 0 || idx >= size) {
        System.out.println("Invalid arguments");
        return -1;
      } else {
        Node temp = head;
        for (int i = 0; i < idx; i++) {
          temp = temp.next;
        }
        return temp.data;
      }
    }

    public void addFirst(int val) {
      Node temp = new Node();
      temp.data = val;
      temp.next = head;
      head = temp;

      if (size == 0) {
        tail = temp;
      }

      size++;
    }

    public void addAt(int idx, int val) {
      if (idx < 0 || idx > size) {
        System.out.println("Invalid arguments");
      } else if (idx == 0) {
        addFirst(val);
      } else if (idx == size) {
        addLast(val);
      } else {
        Node node = new Node();
        node.data = val;

        Node temp = head;
        for (int i = 0; i < idx - 1; i++) {
          temp = temp.next;
        }
        node.next = temp.next;

        temp.next = node;
        size++;
      }
    }

    public void removeLast() {
      if (size == 0) {
        System.out.println("List is empty");
      } else if (size == 1) {
        head = tail = null;
        size = 0;
      } else {
        Node temp = head;
        for (int i = 0; i < size - 2; i++) {
          temp = temp.next;
        }

        tail = temp;
        tail.next = null;
        size--;
      }
    }

    public void removeAt(int idx) {
      if (idx < 0 || idx >= size) {
        System.out.println("Invalid arguments");
      } else if (idx == 0) {
        removeFirst();
      } else if (idx == size - 1) {
        removeLast();
      } else {
        Node temp = head;
        for (int i = 0; i < idx - 1; i++) {
          temp = temp.next;
        }

        temp.next = temp.next.next;
        size--;
      }
    }

    private Node getNodeAt(int idx) {
      Node temp = head;
      for (int i = 0; i < idx; i++) {
        temp = temp.next;
      }
      return temp;
    }

    public void reverseDI() {
      int li = 0;
      int ri = size - 1;
      while(li < ri){
        Node left = getNodeAt(li);
        Node right = getNodeAt(ri);

        int temp = left.data;
        left.data = right.data;
        right.data = temp;

        li++;
        ri--;
      }
    }
 
    public void reversePI(){
      if(size <= 1){
        return;
      }

      Node prev = null;
      Node curr = head;
      while(curr != null){
        Node next = curr.next;
        
        curr.next = prev;
        prev = curr;
        curr = next;
      }

      Node temp = head;
      head = tail;
      tail = temp;
    }
  
    //1.Kth node from last
    public int kthFromLast(int k){
      // write your code here
      //not use size data member directly or indirectly
      //0 based indexing
      //k=2 means element at index 2 from last**
      Node slow = head;
      Node fast = head;
      
      for(int i=0; i<k; i++)
      {
          fast = fast.next;
      }
      // maintain the gap
      
      while(fast.next != null)
      {
          slow = slow.next;
          fast = fast.next;
      }
      //ans will be slow
      return slow.data; 
    }

    //2.Mid Of Linked List
    public int mid(){
      // write your code here
      Node slow = head;
      Node fast = head;
      
      while(fast.next != null && fast.next.next != null)
      {
          slow = slow.next;
          fast = fast.next.next;
      }
      
      return slow.data;
    }

    //3.Merge Two Sorted Linked Lists
    public static LinkedList mergeTwoSortedLists(LinkedList l1, LinkedList l2) {
      // write your code hered
      LinkedList ans = new LinkedList();
      Node c1 = l1.head;
      Node c2 = l2.head;
      while(c1 != null && c2 != null)
      {
          if(c1.data < c2.data)
          {
              ans.addLast(c1.data);
              c1=c1.next;
          }
          else
          {
              ans.addLast(c2.data);
              c2=c2.next;
          }
      }
      
      while(c1 != null)
      {
          ans.addLast(c1.data);
          c1=c1.next;
      }
      
      while(c2 != null)
      {
          ans.addLast(c2.data);
          c2=c2.next;
      }
      
      return ans;
    }

    //4.Special Mid
    public static Node midExtra(Node start, Node end) {
      Node slow = start;
      Node fast = start;

      while(fast != end && fast.next != end)
      {
        slow = slow.next;
        fast = fast.next.next;
      }

      return slow;
    }

    //5.Merge sort
    public static LinkedList mergeSort(Node head, Node tail){
      // write your code here
      if(head == tail)
      {
          LinkedList base = new LinkedList();
          base.addLast(head.data); //tail.data
          return base;
      }
      
      Node mid = midExtra(head, tail);
      LinkedList left = mergeSort(head, mid);
      LinkedList right = mergeSort(mid.next, tail);
      return mergeTwoSortedLists(left, right);
    }

    //6.Remove Duplicates In A Sorted Linked List
    public void removeDuplicates(){
      // write your code here
      LinkedList nl = new LinkedList();
      
      while(this.size > 0)
      {
          int val = this.getFirst();
          this.removeFirst();
          if(nl.size == 0 || nl.tail.data != val)
          {
              nl.addLast(val);
          }
      }
      
      this.head = nl.head;
      this.tail = nl.tail;
      this.size = nl.size;
    }

    //7.Odd Even Linked List
    public void oddEven(){
      // write your code here
      LinkedList odd = new LinkedList();
      LinkedList even = new LinkedList();
      
      while(this.size > 0)
      {
          int val = this.getFirst();
          this.removeFirst();
          if(val%2 == 0)
            even.addLast(val);
          else
            odd.addLast(val);
      }
      
      if(odd.size>0 && even.size>0)
      {
          odd.tail.next = even.head;
          this.head = odd.head;
          this.tail = even.tail;
          this.size = odd.size + even.size;
      }
      else if(odd.size>0)
      {
          this.head = odd.head;
          this.tail = odd.tail;
          this.size = odd.size;
      }
      else
      {
          this.head = even.head;
          this.tail = even.tail;
          this.size = even.size;
      }
    }
    
    //8.K Reverse In Linked List
    public void kReverse(int k) {
      // write your code here
      if(k > this.size)
        return;
      LinkedList ans = new LinkedList();
      while(this.size >= k)
      {
          LinkedList temp = new LinkedList();
          for(int i=0; i<k; i++)
          {
              int val = this.getFirst();
              this.removeFirst();
              temp.addFirst(val);
          }
          
          if(ans.size == 0)
            ans = temp;
          else
          {
            ans.tail.next = temp.head;
            ans.tail = temp.tail;
            ans.size += temp.size;
          }
      }
      
      //left elements
      if(this.size > 0)
      {
          ans.tail.next = this.head;
          ans.tail = this.tail;
          ans.size += this.size;
      }
      
      this.head = ans.head;
      this.tail = ans.tail;
      this.size = ans.size;
    }

    //9.
    private void displayReverseHelper(Node node){
      // write your code here
      if(node == null)
      {
          return;
      }
      displayReverseHelper(node.next);
      System.out.print(node.data + " ");
      
    }

    public void displayReverse(){
      displayReverseHelper(head);
      System.out.println();
    }

    //10.
    private void reversePRHelper(Node node){
      // write your code here
      if(node == null)
        return;
      if(node == tail)
        return;
     
      reversePRHelper(node.next);
      node.next.next = node;
    }

    public void reversePR(){
      // write your code here
      reversePRHelper(this.head);
      head.next = null; //to break the loop 

      //Swap head and tail;
      Node temp = this.head;
      this.head = this.tail;
      this.tail = temp;
    }

    //11.
    private boolean IsPalindromeHelper(Node right) {
      if(right == null)
        return true;
        
        boolean recAns = IsPalindromeHelper(right.next);
        if(recAns)
        {
            if(right.data == left.data)
            {
                left = left.next;
                return true;
            }
            else
                return false;
        }
        else
            return false;

            // if(recAns == false)
            // {
            //     return false;
            // }
            // if(left.data != right.data)
            // {
            //     return false;
            // }
            // else
            // {
            //     pleft = pleft.next;
            //     return true;
            // }
    }
    
    Node left;
    public boolean IsPalindrome() {
      // write your code here
      left = head;  //this.head
      return IsPalindromeHelper(left);
    }

    //12.
    private void foldHelper(Node right, int count) {
      if(right == null)
          return;
      
      foldHelper(right.next, count+1);
      if(count > size/2)
      {
          Node temp = left.next;
          left.next = right;
          right.next = temp;
          left = temp;
      }
      else if(count == size/2)
      {
          tail = right;
          tail.next = null;
      }

      // right.next = left.next;
      // left.next = right;
      // left = right.next;
    }

    Node left;
    public void fold() {
      // write your code here
      left = this.head;
      foldHelper(left, 0);
      
    }

    //13.
    public static int findIntersection(LinkedList one, LinkedList two){
      // write your code here
      Node c1 = one.head;
      Node c2 = two.head;
      int d = Math.abs(one.size - two.size);
      if(one.size > two.size)
      {
          for(int i=0; i<d; i++)
            c1 = c1.next;
      }
      else
      {
          for(int i=0; i<d; i++)
            c2 = c2.next;
      }
      
      while(c1 != c2)
      {
          c1=c1.next;
          c2=c2.next;
      }
      return c1.data;
    }

    //14. Add Two Linked Lists
    
    
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    LinkedList list = new LinkedList();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("addLast")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        list.addLast(val);
      } else if (str.startsWith("size")) {
        System.out.println(list.size());
      } else if (str.startsWith("display")) {
        list.display();
      } else if (str.startsWith("removeFirst")) {
        list.removeFirst();
      } else if (str.startsWith("getFirst")) {
        int val = list.getFirst();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("getLast")) {
        int val = list.getLast();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("getAt")) {
        int idx = Integer.parseInt(str.split(" ")[1]);
        int val = list.getAt(idx);
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("addFirst")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        list.addFirst(val);
      } else if (str.startsWith("addAt")) {
        int idx = Integer.parseInt(str.split(" ")[1]);
        int val = Integer.parseInt(str.split(" ")[2]);
        list.addAt(idx, val);
      } else if (str.startsWith("removeLast")) {
        list.removeLast();
      } else if (str.startsWith("removeAt")) {
        int idx = Integer.parseInt(str.split(" ")[1]);
        list.removeAt(idx);
      } else if(str.startsWith("reverseDI")){
        list.reverseDI();
      } else if(str.startsWith("reversePI")){
        list.reversePI();
      } else if(str.startsWith("kthFromEnd")){
        int idx = Integer.parseInt(str.split(" ")[1]);
        System.out.println(list.kthFromLast(idx));
      }
      str = br.readLine();
    }
  }
}