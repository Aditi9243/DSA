//Similar to using 2 stack
class MinStack {
    
    int min = Integer.MAX_VALUE;
    Stack<Integer> st = new Stack<>();

    public MinStack() {
        
    }
    
    public void push(int val) {
        if(val <= min)
        {
            st.push(min);
            min = val;
        }
        st.push(val);
    }
    
    public void pop() {
        if(st.pop() == min)
            min = st.pop();
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


//Using 2 stack
class MinStack {
    Stack<Integer> st, min;

    public MinStack() {
        st = new Stack<>();
        min = new Stack<>();
    }
    
    public void push(int val) {
        st.push(val);
        
        if(min.isEmpty())
            min.push(val);
        
        else if(min.peek() >= val)
            min.push(val);
    }
    
    public void pop() {
        int temp = st.pop();
        if(!min.isEmpty() && min.peek() == temp)
            min.pop();
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return min.peek();
    }
}

//Using node - Best + IMPORTANT
class MinStack {

    private Node head;
    
    public void push(int val) {
        if(head == null)
            head = new Node(val, val, null);
        else
            head = new Node(val, Math.min(val, head.min), head);
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    
    private class Node
    {
        int val;
        int min;
        Node next;
        
        private Node(int val, int min, Node next)
        {
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }
}