//Sorting
class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] != i)
                return i;
        }
        return nums.length;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        int left = 0, right = nums.length;  //Binary search
        while(left < right)
        {
            int mid = left + (right-left)/2;
            if(nums[mid] > mid)
                right = mid;
            else
                left = mid+1;
        }
        
        return left;
    }
}

//Sum
class Solution {
    public int missingNumber(int[] nums) {
        int sum = nums.length;  //store sum of n-1 numbers
        for(int i=0; i<nums.length; i++)
        {
            sum += i - nums[i];
        }
        return sum; //return the remaining number
    }
}

//Bit manipulation
class Solution {
    public int missingNumber(int[] nums) {
        int xor = 0, i = 0;
        for(i=0; i<nums.length; i++)
        {
            xor = xor^i^nums[i];    //a^b^b=a
        }
        return xor^i;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int xor = nums.length;
        for(int i=0; i<nums.length; i++)
        {
            xor = xor^i^nums[i];    //a^b^b=a
        }
        return xor;
    }
}