class Solution {
    // class EnvelopeComparator implements Comparator<int[]> {
    //     public int compare(int []a, int []b)
    //     {
    //         return a[0]==b[0] ? b[1]-a[1] : a[0]-b[0];
    //     }
    // }
    
    public int maxEnvelopes(int[][] envelopes) {
        if(envelopes.length < 2)
            return envelopes.length;
        
        Arrays.sort(envelopes, new Comparator<int[]>(){
            public int compare(int[] arr1, int[] arr2){
                if(arr1[0] == arr2[0])
                    return arr2[1] - arr1[1];
                else
                    return arr1[0] - arr2[0];
           } 
        });
        
        // Arrays.sort(envelopes, new EnvelopeComparator());
        
        int []dp = new int[envelopes.length];
        int size = 0;
        
        for(int []envelope : envelopes)
        {
            //implement binary search here
            int left = 0, right = size, mid = 0;
            while(left < right)
            {
                mid = left + (right-left)/2;
                if(dp[mid] < envelope[1])
                    left = mid+1;
                else
                    right = mid;
            }
            
            dp[left] = envelope[1];
            if(left == size)
                size++;
        }
        
        return size;
    }
}

//Need to know about the problem LIS -> Leetcode 300