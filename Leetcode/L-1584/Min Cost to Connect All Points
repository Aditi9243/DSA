class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        boolean[] visited = new boolean[n];
        int ans = 0;
        int i = 0, connected = 0;

        while (++connected < n) {
            visited[i] = true;

            for (int j = 1; j < n; ++j) {
                if (!visited[j]) {
                    int dist = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                    pq.offer(new int[]{dist, j});
                }
            }

            while (visited[pq.peek()[1]]) {
                pq.poll();
            }

            int[] curr = pq.poll();
            ans += curr[0];
            i = curr[1];
        }

        return ans;
    }
}