//dp
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int [][]ans = new int[m][n];
        
        for(int i=0; i<m; i++)   //First column
        {
            if(obstacleGrid[i][0] == 1) //Any obstacle found, rest path is blocked
            {
                ans[i][0] = 0;
                break;
            }
            ans[i][0] = 1;
        }
        
        for(int j=0; j<n; j++)  //First row
        {
            if(obstacleGrid[0][j] == 1) //Any obstacle found then again rest path is blocked
            {
                ans[0][j] = 0;
                break;
            }
            ans[0][j] = 1;
        }
        
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                if(obstacleGrid[i][j] == 1)
                {
                    ans[i][j] = 0;
                }
                else
                    ans[i][j] = ans[i-1][j] + ans[i][j-1];
            }
        }
        
        return ans[m-1][n-1];
    }
}

//dp
//No need to initialize dp value with 0 since its default value will be 0
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int [][]ans = new int[m][n];
        
        for(int i=0; i<m; i++)   //First column
        {
            if(obstacleGrid[i][0] != 1) //Any obstacle found, rest path is blocked
            {
                ans[i][0] = 1;
            }
            else
                break;
        }
        
        for(int j=0; j<n; j++)  //First row
        {
            if(obstacleGrid[0][j] != 1) //Any obstacle found then again rest path is blocked
            {
                ans[0][j] = 1;
            }
            else
                break;
        }
        
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                if(obstacleGrid[i][j] != 1)
                {
                    ans[i][j] = ans[i-1][j] + ans[i][j-1];
                }    
            }
        }
        
        return ans[m-1][n-1];
    }
}

//Another dp method
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int [][]dp = new int[m][n];
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else if(i==0 && j==0)
                    dp[i][j] = 1;
                else if(i==0)
                    dp[i][j] = dp[i][j-1];
                else if(j==0)
                    dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = dp[i][j-1] + dp[i-1][j];
            }
        }
        
        return dp[m-1][n-1];
    }
}

//Optimized way
//meaning : sum of all path from left and up grid
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int []dp = new int[n+1];
        // dp[0] = 0;
        dp[1] = 1;
        for(int i=0; i<m; i++)
        {
            for(int j=1; j<=n; j++)
            {
                if(obstacleGrid[i][j-1] == 1)
                    dp[j] = 0;
                else
                    dp[j] += dp[j-1];
            }
        }
        
        return dp[n];
    }
}