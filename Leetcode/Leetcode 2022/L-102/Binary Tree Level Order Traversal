/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //BFS - iterative
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null)
            return new ArrayList<>();
        
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
            
            List<Integer> temp = new ArrayList<>();
            for(int i=0; i<size; i++)
            {
                TreeNode curr = q.remove();
                temp.add(curr.val);
                if(curr.left != null)
                    q.add(curr.left);
                
                if(curr.right != null)
                    q.add(curr.right);
            }
            
            ans.add(temp);
        }
        
        return ans;
    }
}

//DFS - recursive
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null)
            return new ArrayList<>();
        
        List<List<Integer>> ans = new ArrayList<>();
        solution(ans, root, 0);
        return ans;
    }
    
    private void solution(List<List<Integer>> ans, TreeNode root, int height)
    {
        if(root == null)
            return;
        
        if(height == ans.size())
        {
            ans.add(new ArrayList<>());
        }
        
        ans.get(height).add(root.val);
        solution(ans, root.left, height+1);
        solution(ans, root.right, height+1);
    }
}