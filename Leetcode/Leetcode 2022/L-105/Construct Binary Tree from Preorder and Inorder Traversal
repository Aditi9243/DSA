/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0)
            return null;
        
        Stack<TreeNode> s = new Stack<>();
        TreeNode root = new TreeNode(preorder[0]), curr = root;
        for(int i=1, j=0; i < preorder.length; i++)
        {
            if(curr.val != inorder[j])
            {
                curr.left = new TreeNode(preorder[i]);
                s.push(curr);
                curr = curr.left;
            }
            else
            {
                j++;
                while(!s.isEmpty() && s.peek().val == inorder[j])
                {
                    curr = s.pop();
                    j++;
                }
                curr = curr.right = new TreeNode(preorder[i]);
            }
        }
        
        return root;
    }
}

