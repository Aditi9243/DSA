/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //Iterative
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count = 0;
        for(ListNode node = head; node != null; node = node.next)
            count++;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode prev = dummy;
        ListNode tail = head;
        while(count >= k)
        {
            for(int i=1; i<k; i++)
            {
                ListNode temp = tail.next.next;
                tail.next.next = prev.next;
                prev.next = tail.next;
                tail.next = temp;
            }
            prev = tail;
            tail = tail.next;
            count -= k;
        }
        
        return dummy.next;
    }
}

//Recursive
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count = 0;
        ListNode curr = head;
        while(curr != null && count != k)
        {
            curr = curr.next;
            count++;
        }
        if(count == k)
        {
            curr = reverseKGroup(curr, k);
            while(count-- > 0)
            {
                ListNode temp = head.next;
                head.next = curr;
                curr = head;
                head = temp;
            }
            head = curr;
        }
        
        return head;
    }
}

//Wrong code
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count = 0;
        ListNode curr = head;
        while(curr != null && count != k)
        {
            curr = curr.next;
            count++;
        }
        
        int round = count/k;
        if(round == 0)
            return head;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        
        for(int i=0; i<round; i++)
        {
            //each list with size k, reverse it
            ListNode start = prev.next;
            ListNode then = start.next;
            
            for(int j=0; j<k-1; j++)
            {
                start.next = then.next;
                then.next = prev.next;
                prev.next = then;
                then = start.next;
            }
        
            prev = start;
        }
        
        return dummy.next;
    }
}

public ListNode reverseKGroup(ListNode head, int k) {
    if(head == null) return null;
    
    int len = 0;
    ListNode l = head; //len is the length of this list
    while(l != null)
    {
        len++;
        l = l.next;
    }
       
    int round = len / k;   //cut the list, so we have 'round' lists with size k 
    if(round == 0) return head;
    
    ListNode dummy = new ListNode(-1);
    dummy.next = head;
    ListNode pre = dummy;
    for(int i = 0; i < round; i++)
    {
        //for each list with size k, reverse it
        ListNode start = pre.next;
        ListNode then = start.next;
        for(int j = 0; j < k-1; j++)
        {
            start.next = then.next;
            then.next = pre.next;
            pre.next = then;
            then = start.next;
        }
        pre = start;
    }
    return dummy.next;
}