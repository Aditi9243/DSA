/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Recursive solution
class Solution {
    public boolean isValidBST(TreeNode root) {
        return solution(root, null, null);
    }
    
    private boolean solution(TreeNode root, TreeNode min, TreeNode max)
    {
        if(root == null)
            return true;
        
        if((min != null && root.val <= min.val) || (max != null && root.val >= max.val))
            return false;
        
        return solution(root.left, min, root) && solution(root.right, root, max);
        
    }
}

//Iterative
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null)
            return true;
        
        Stack<TreeNode> st = new Stack<>();
        TreeNode pre = null;
        while(root != null || !st.isEmpty())
        {
            while(root != null)
            {
                st.push(root);
                root = root.left;
            }
            
            root = st.pop();
            if(pre != null && root.val <= pre.val)
                return false;
            pre = root;
            root = root.right;
        }
        
        return true;
    }
}

