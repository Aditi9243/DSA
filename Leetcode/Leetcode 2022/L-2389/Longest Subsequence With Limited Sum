class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        // int []ans = new int[queries.length];

        for(int i=1; i<nums.length; i++)
        {
            nums[i] += nums[i-1];
        }

        for(int i=0; i<queries.length; i++)
        {
            int x = queries[i]; //Arrays.binarySearch(nums, x);
            int maxLength = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[j] <= x) {
                    maxLength = Math.max(maxLength, j + 1);
                }
            }
            queries[i] = maxLength; // ans[i] = maxLength
        }

        return queries; // return ans;
    }
}

//Using binary search - Optimized ans
class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int []ans = new int[queries.length];
        
        for(int i=1; i<nums.length; i++)
        {
            nums[i] += nums[i-1];
        }

        for(int i=0; i<queries.length; i++)
        {
            int x = queries[i]; //Arrays.binarySearch(nums, x); - inbuilt function
            ans[i] = binarySearch(x, nums);
        }

        return ans;
    }

    private int binarySearch(int x, int[] nums)
    {
        int start = 0;
        int end = nums.length-1;
        int ans = -1;
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            if(nums[mid] <= x)
            {
                ans = mid;
                start = mid+1;
            }
            else 
            {
                end = mid-1;
            }
        }

        return ans+1;
    }
}