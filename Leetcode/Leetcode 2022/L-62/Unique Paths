//Recursion
class Solution {
    public int uniquePaths(int m, int n) {
        return solution(m-1, n-1);
    }
    
    public int solution(int m, int n)
    {
        if(m == 0 && n == 0)
            return 1;
        else if(m < 0 || n < 0)
            return 0;
        
        return solution(m-1, n) + solution(m, n-1);
    }
}

//Memoization
class Solution {
    public int uniquePaths(int m, int n) {
        return solution(m-1, n-1);
    }
    
    public int solution(int m, int n, int [][]dp)
    {
        if(m == 0 && n == 0)
            return 1;
        else if(m < 0 || n < 0)
            return 0;
        
        else if(dp[m][n] > 0)
            return dp[m][n];
        
        return dp[m][n] = solution(m-1, n, dp) + solution(m, n-1, dp);
    }
}

//DP
class Solution {
    public int uniquePaths(int m, int n) {
        int [][]dp = new int[m][n];
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(i == 0 || j == 0)
                    dp[i][j] = 1;
                else dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
}