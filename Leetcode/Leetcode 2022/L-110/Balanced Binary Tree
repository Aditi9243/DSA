/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        int left = depth(root.left);
        int right = depth(root.right);
        
        return Math.abs(left - right) <= 1 && isBalanced(root.left) && isBalanced(root.right);
    }
    
    private int depth(TreeNode root)
    {
        if(root == null)
            return 0;
        return Math.max(depth(root.left), depth(root.right)) + 1;
    }
}

//Based on dfs
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        return dfsHeight(root) != -1? true: false;
    }
    
    private int dfsHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        
        int left = dfsHeight(root.left);
        // if(left == -1)
        //     return -1;
        int right = dfsHeight(root.right);
        // if(right == -1)
        //     return -1;
        
        if(left == -1 || right == -1 || Math.abs(left - right) > 1)
            return -1;
        return Math.max(left, right) + 1;
    }
}

//dfs another solution
class Solution {
    boolean isBalanced = true;
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        dfsHeight(root);
        return isBalanced;
    }
    
    private int dfsHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        
        int left = dfsHeight(root.left);
        int right = dfsHeight(root.right);
        
        if(Math.abs(left - right) > 1)
            isBalanced = false;
        return Math.max(left, right) + 1;
    }
}



