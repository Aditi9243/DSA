//Solution in two passes
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int max = nums[0];
        
        int prod = 1;
        for(int i=0; i<n; i++)
        {
            prod *= nums[i];
            max = Math.max(max, prod);
            if(nums[i]==0)
                prod = 1;
        }
        
        prod = 1;
        for(int i=n-1; i>=0; i--)
        {
            prod *= nums[i];
            max = Math.max(max, prod);
            if(nums[i]==0)
                prod = 1;
        }
        return max;
    }
}

//More optimised way
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int max = nums[0];
        int left = 0, right = 0;
        
        for(int i=0; i<n; i++)
        {
            left = (left == 0 ? 1 : left) * nums[i];
            right = (right == 0 ? 1 : right) * nums[n-i-1];
            max = Math.max(max, Math.max(left, right));
        }

        return max;
    }
}
