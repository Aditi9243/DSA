/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode curr = root;
        while(curr != null)
        {
            if(p.val < curr.val && q.val < curr.val)
                curr = curr.left;
            else if(p.val > curr.val && q.val > curr.val)
                curr = curr.right;
            else
                return curr;//divergent case
        }
        
        return null;
    }
}

//Another way
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        int small = Math.min(p.val, q.val);
        int large = Math.max(p.val, q.val);
        while (root != null) {
            if (root.val > large) // p, q belong to the left subtree
                root = root.left;
            else if (root.val < small) // p, q belong to the right subtree
                root = root.right;
            else // Now, small <= root.val <= large -> This root is the LCA between p and q
                return root;
        }
        return null;
    }
}

//Recursion
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null)
            return null;
        
        if(p.val < root.val && q.val < root.val)
            return lowestCommonAncestor(root.left, p, q);

        else if(p.val > root.val && q.val > root.val)
            return lowestCommonAncestor(root.right, p, q);
        
        else
            return root;
    }
}