/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null)
            return root;
        
        TreeNode left = root.left;
        TreeNode right = root.right;
        
        root.left = invertTree(right);
        root.right = invertTree(left);
        return root;
    }
}

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null)
            return root;
        
        TreeNode tempLeft = root.left; 
        
        root.left = invertTree(root.right);
        root.right = invertTree(tempLeft);
        return root;
    }
}

//Using queue
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null)
            return root;
        
        Queue<TreeNode> qu = new LinkedList<>();
        qu.add(root);
        
        while(!qu.isEmpty())
        {
            TreeNode node = qu.remove();
            TreeNode left = node.left;
            node.left = node.right;
            node.right = left;
            
            if(node.left != null)
                qu.add(node.left);
            
            if(node.right != null)
                qu.add(node.right);
        }
        
        return root;
    }
}

//Using deque
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null)
            return root;
        
        Deque<TreeNode> st = new LinkedList<>();
        st.push(root);
        
        while(!st.isEmpty())
        {
            TreeNode node = st.pop();
            TreeNode left = node.left;
            node.left = node.right;
            node.right = left;
            
            if(node.left != null)
                st.push(node.left);
            
            if(node.right != null)
                st.push(node.right);
        }
        
        return root;
    }
}