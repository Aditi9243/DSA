//Merge all lists into list0 and return the list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0 || lists == null)
            return null;
        
        for(int i=1; i<lists.length; i++)
        {
            lists[0] = merge(lists[0],lists[i]);
        }
        
        return lists[0];  
    }
    
    public ListNode merge(ListNode l1, ListNode l2)
    {
        ListNode head = new ListNode(0);
        ListNode temp = head;
        while(l1!=null && l2!=null)
        {
            if(l1.val < l2.val)
            {
                temp.next = l1;
                l1 = l1.next;
            }
            else
            {
                temp.next = l2;
                l2 = l2.next;
            }
            
            temp = temp.next;
        }
        
        temp.next = (l1 != null) ? l1 : l2;
        return head.next;
    }
}

//Using priority queue
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0 || lists == null)
            return null;
        
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        
        //minPQ
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b) -> {
            return a.val - b.val;
        });
        
        for(int i=0; i<lists.length; i++)
        {
            if(lists[i] != null)
                pq.add(lists[i]);
        }
        
        while(pq.size() > 0)
        {
            ListNode curr = pq.remove();
            prev.next = curr;
            prev = prev.next;
            
            if(curr.next != null)
                pq.add(curr.next);
        }
        
        return dummy.next;  
    }
}

//Different approaches
//https://leetcode.com/problems/merge-k-sorted-lists/discuss/429518/JAVA-SUMMARY-of-all-solutions-(B-F-minPQ-Divide-And-Conquer)