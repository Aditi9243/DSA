/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        
        if(root == null)
            return list;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
            TreeNode curr = null;
            
            while(size > 0)
            {
                curr = q.remove();
                if(curr.left != null)
                    q.add(curr.left);
                if(curr.right != null)
                    q.add(curr.right);
                
                size--;
            }
            
            list.add(curr.val);
        }
        return list;
    }
}

//Recursion
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null)
            return new ArrayList<>();
        
        List<Integer> list = new ArrayList<>();
        helper(root, list, 0);
        return list;
    }
    
    private void helper(TreeNode root, List<Integer> list, int depth)
    {
        if(root == null)
            return;
        
        if(depth == list.size())
        {
            list.add(root.val);
        }
            
        helper(root.right, list, depth+1);
        helper(root.left, list, depth+1);
    }
}