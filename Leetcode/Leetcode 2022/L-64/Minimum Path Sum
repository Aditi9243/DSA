//Recursion (Error - TLE)
class Solution {
    public int min = Integer.MAX_VALUE;
    public int minPathSum(int[][] grid) {
        helper(grid, 0, 0, grid.length-1, grid[0].length-1, 0);
        return min;
    }
    
    public void helper(int [][]grid, int sr, int sc, int dr, int dc, int cost)
    {
        if(sr == dr && sc == dc)
        {
            cost += grid[sr][sc];
            if(min > cost)
                min = cost;
        }
        
        // if(sr > dr || sc > dc)  return;
        // helper(grid, sr, sc+1, dr, dc, cost+grid[sr][sc]);  //horizontal jump
        // helper(grid, sr+1, sc, dr, dc, cost+grid[sr][sc]);  //vertical jump
        
        if(sc + 1 <= dc)
            helper(grid, sr, sc+1, dr, dc, cost+grid[sr][sc]);  //horizontal jump
        if(sr + 1 <= dr)
            helper(grid, sr+1, sc, dr, dc, cost+grid[sr][sc]);  //vertical jump
    }
}

//Another way of recursion
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;    //height
        int m = grid[0].length; //width
        return helper(grid, n-1, m-1);
    }
    
    public int helper(int [][]grid, int row, int col)
    {
        if(row == 0 && col == 0)
            return grid[row][col];
        
        if(row == 0 && col != 0)
            return grid[row][col] + helper(grid, row, col-1);
        
        if(row != 0 && col == 0)
            return grid[row][col] + helper(grid, row-1, col);
                
        return grid[row][col] + Math.min(helper(grid, row-1, col), helper(grid, row, col-1));
    }
}

//Memoization
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;    //height
        int m = grid[0].length; //width
        int dp[][] = new int[n][m];
        
        return helper(grid, n-1, m-1, dp);
    }
    
    public int helper(int [][]grid, int row, int col, int [][]dp)
    {
        if(row == 0 && col == 0)
            return grid[row][col];
        
        if(dp[row][col] != 0)
            return dp[row][col];
        
        if(row == 0 && col != 0)
            return grid[row][col] + helper(grid, row, col-1, dp);
        
        if(row != 0 && col == 0)
            return grid[row][col] + helper(grid, row-1, col, dp);
                
        return grid[row][col] + Math.min(helper(grid, row-1, col, dp), helper(grid, row, col-1, dp));
        
    }
}

//DP
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;    //height
        int m = grid[0].length; //width
        int dp[][] = new int[n][m];
        
        for(int i=0; i<n; i++)  //row
        {
            for(int j=0; j<m; j++)  //col
            {
                if(i==0 && j==0)
                {
                    //starting point
                    dp[i][j] = grid[i][j];
                }
                else if(i==0 && j!=0)
                {
                    //top row
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                }
                else if(j==0 && i!=0)
                {
                    //first column
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                }
                else
                {
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
                }
            }
        }
        
        return dp[n-1][m-1];
    }
}

//Another way of writing dp program
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;    //height
        int m = grid[0].length; //width
        
        for(int i=1; i<n; i++)  //first col
            grid[i][0] += grid[i-1][0];
        
        for(int j=1; j<m; j++)  //first row
            grid[0][j] += grid[0][j-1];
        
        for(int i=1; i<n; i++)  //row
        {
            for(int j=1; j<m; j++)  //col
            {
                    grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);
            }
        }
        
        return grid[n-1][m-1];
    }
}