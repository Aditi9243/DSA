/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        depth(root);
        return max;
    }
    
    private int depth(TreeNode root)
    {
        if(root == null)
            return 0;
        
        int left = depth(root.left);
        int right = depth(root.right);
        
        max = Math.max(max, left+right);
        
        return Math.max(left, right) + 1;
    }
}

//Using array
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        int []diameter = new int[1];
        depth(root, diameter);
        return diameter[0];
    }
    
    private int depth(TreeNode root, int []arr)
    {
        if(root == null)
            return 0;
        
        int left = depth(root.left, arr);
        int right = depth(root.right, arr);
        
        arr[0] = Math.max(arr[0], left+right);
        
        return Math.max(left, right) + 1;
    }
}

