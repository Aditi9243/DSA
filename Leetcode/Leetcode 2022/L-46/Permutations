class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        solution(ans, nums, new ArrayList<>(), 0);
        return ans;
    }
    
    public void solution(List<List<Integer>> ans, int []arr, List<Integer> temp, int start)
    {
        if(temp.size() == arr.length)
        {
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i=0; i<=temp.size(); i++)
        {
            temp.add(i, arr[start]);
            solution(ans, arr, temp, start+1);
            temp.remove(i);
        }
    }
}

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();

        if(nums.length == 0)
            return ans;
        
        List<Integer> temp = new ArrayList<Integer>();
        temp.add(nums[0]);
        ans.add(new ArrayList<>(temp));

        for(int i=1; i<nums.length; i++)
        {
            int size = ans.size();
            for(int j=0; j<size; j++)
            {
                for(int x=0; x<ans.get(j).size(); x++)
                {
                    List<Integer> newList = new ArrayList<>(ans.get(j));
                    newList.add(x, nums[i]);
                    ans.add(newList);
                }
                ans.get(j).add(nums[i]);
            }
        }

        return ans;
    }
}

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();

        if(nums.length == 0)
            return ans;
        
        ans.add(new ArrayList<Integer>());
        for (int n : nums) {
            int size = ans.size();
            while (size > 0) {
                List<Integer> r = ans.remove(0);
                for (int i = 0; i <= r.size(); i++) {
                    List<Integer> temp = new ArrayList<Integer>(r);
                    temp.add(i, n);
                    ans.add(temp);
                }
                size--;
            }
        }

        return ans;
    }
}

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> temp = new ArrayList<>();
        for(int i=0; i<nums.length; i++)
        {
            temp.add(nums[i]);
        }

        helper(ans, temp, 0);
        return ans;
    }

    private void helper(List<List<Integer>> ans, List<Integer> temp, int i)
    {
        if(i == temp.size() - 1)
        {
            ans.add(new ArrayList<>(temp));
        }

        for(int j=i; j<temp.size(); j++)
        {
            if (i != j && temp.get(i).equals(temp.get(j))) {
                continue; // Skip swapping if the elements are the same
            }
            Collections.swap(temp, i, j);
            helper(ans, temp, i+1);
            Collections.swap(temp, i, j); // Backtrack by swapping back to the original order
        }
    }
}