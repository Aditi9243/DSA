//brute force
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length, n=nums2.length;
        int []nums = new int[m+n];
        int k=0;
        for(int i=0; i<m; i++)
        {
            nums[k++] = nums1[i];
        }
        for(int i=0; i<n; i++)
        {
            nums[k++] = nums2[i];
        }
        
        Arrays.sort(nums);
        int mid = (m+n)/2;
        
        return ((m+n)%2 != 0)? nums[mid] : (double)(nums[mid]+nums[mid-1])/2;
        
    }
}

//Sort while inserting
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length, n=nums2.length;
        int []nums = new int[m+n];
        int i=0, j=0, k=0;
        
        while(i<m && j<n)
        {
            if(nums1[i] < nums2[j])
            {
                nums[k] = nums1[i];
                i++;
                k++;
            }
            else
            {
                nums[k] = nums2[j];
                j++;
                k++;
            }
        }
        
        while(i<m)
        {
            nums[k] = nums1[i];
            i++;
            k++;
        }
        
        while(j<n)
        {
            nums[k] = nums2[j];
            j++;
            k++;
        }
        
        int mid = (m+n)/2;
        
        return ((m+n)%2 != 0)? nums[mid] : (double)(nums[mid]+nums[mid-1])/2;
        
    }
}

//Iterative way
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length, n=nums2.length;
        int i=0, j=0;   //counters for 2 arrays
        
        int mid1 = 0;
        int mid2 = 0;
        
        for(int k=0; k<=(m+n)/2; k++)
        {
            mid1 = mid2;
            if(i == m)  //no ele left in array 1
            {
                mid2 = nums2[j];
                j++;
            }
            
            else if(j == n) //no ele left in array 2
            {
                mid2 = nums1[i];
                i++;
            }
            
            else if(nums1[i] < nums2[j])
            {
                mid2 = nums1[i];
                i++;
            }
            
            else
            {
                mid2 = nums2[j];
                j++;
            }
        }
        
        if((m+n)%2 == 0)
            // return (double)(mid1 + mid2)/2;
            return (mid1 + mid2)/2.0;
        
        return mid2;
        
    }
}

//Divide and conquer- TRY*********

//Wrong code
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length, n=nums2.length;
        int []nums = new int[m+n];
        int i=0, j=0;
        int mid = (m+n)/2;
        
        if((m+n)%2 == 0)
            mid = mid-1;    //if even dec by 1
        
        while(mid > 0)
        {
            if(nums1[i] < nums2[j])
            {
                i++;
            }
            else
            {
                j++;
            }
            mid--;
        }
        
        if((m+n)%2 != 0)
            return (nums[i] < nums[j])? nums[i] : nums[j];
        
        int n1 = (nums[i] < nums[j])? nums[i++] : nums[j++];
        int n2 = (nums[i] < nums[j])? nums[i++] : nums[j++];
        
        return (double)(n1 + n2)/2;
        
    }
}