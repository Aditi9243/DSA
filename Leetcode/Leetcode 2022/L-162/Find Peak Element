//Using binary search - required in ques => O(log n) time complexity
class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length == 1)
            return 0;
        int left = 0, right = nums.length-1;
        while(right-left>1)
        {
            int mid = left + (right-left)/2;
            if(nums[mid] < nums[mid+1])
                left = mid+1;
            else
                right = mid;
        }
        
        return (left==nums.length-1 || nums[left] > nums[left+1]) ? left : right;
    }
}

//Linear search - more better as per leetcode
class Solution {
    public int findPeakElement(int[] nums) {
        int max = nums[0];
        for(int i=1; i<nums.length; i++)
        {
             if(nums[i] > max)
                 max = nums[i];
        }
        
        return peakIndex(nums, max);
    }
    
    public int peakIndex(int []arr, int x)
    {
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i] == x)
                return i;
        }
        return -1;
    }
}