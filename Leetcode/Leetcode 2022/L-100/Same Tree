/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //Recursive
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)
            return true;
        
        if(p == null || q==null || p.val != q.val)
            return false;
        
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

//Iterative - tle
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)
            return true;
        Queue<TreeNode> qu = new LinkedList<>();
        qu.add(p);
        qu.add(q);
        
        while(!qu.isEmpty())
        {
            TreeNode pNode = qu.remove();
            TreeNode qNode = qu.remove();
            if(pNode == null && qNode == null)
                continue;
            
            else if(pNode == null || qNode == null || pNode.val != qNode.val)
                return false;
            
            qu.add(p.left);
            qu.add(q.left);
            qu.add(p.right);
            qu.add(q.right);
        }
        
        return true;
    }
}

//Iterative - can be done using 2 stacks ... TRY