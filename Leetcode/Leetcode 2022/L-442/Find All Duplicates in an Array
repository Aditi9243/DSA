//Brute force
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0; i<nums.length-1; i++)
        {
            if(nums[i] == nums[i+1])
                ans.add(nums[i++]);
        }
        return ans;
    }
}

//Flipping the number
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0; i<nums.length; i++)
        {
            int idx = Math.abs(nums[i])-1;
            if(nums[idx] < 0)
                // ans.add(Math.abs(idx+1));
                ans.add(idx+1);
            nums[idx] = -nums[idx];
        }
        return ans;
    }
}
//The concept here is to negate each number's index as the input is 1 <= a[i] <= n (n = size of array). Once a value is negated, if it requires to be negated again then it is a duplicate.

//By Swapping
//https://leetcode.com/problems/find-all-duplicates-in-an-array/discuss/92411/Java-O(1)-space-O(n)-time-solution-with-swapping
