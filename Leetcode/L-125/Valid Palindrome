class Solution {
    public boolean isPalindrome(String s) {
        if(s.length() == 0 || s.length() == 1)
            return true;
        String str = "";
        for(char ch : s.toLowerCase().toCharArray())
        {
            if(ch>='a' && ch<='z' || ch>='A' && ch<='Z') 
                str += ch;
            else if(ch>='0' && ch<='9')
                str += ch;
        }
        
        System.out.println(str);
        int start = 0, end = str.length()-1;
        while(start<end)
        {
            if(str.charAt(start) != str.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}

//Optimized - best
class Solution {
    public boolean isPalindrome(String s) {
        if(s.isEmpty())
            return true;
    
        int start = 0, end = s.length()-1;
        char chHead, chTail;
        while(start<end)
        {
            chHead = s.charAt(start);
            chTail = s.charAt(end);
            if(!Character.isLetterOrDigit(chHead))
                start++;
            else if(!Character.isLetterOrDigit(chTail))
                end--;
            else
            {
                if(Character.toLowerCase(chHead) != Character.toLowerCase(chTail))
                    return false;
                start++;
                end--;
            }            
        }
        return true;
    }
}

//Using stringbuffer
class Solution {
    public boolean isPalindrome(String s) {
        if(s.isEmpty())
            return true;
    
        String actual = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
        String rev = new StringBuffer(actual).reverse().toString();
        return actual.equals(rev);
    }
}