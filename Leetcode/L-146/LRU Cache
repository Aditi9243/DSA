class LRUCache {

    class Node
    {
        int key;
        int value;
        Node prev;
        Node next;
        
        Node(int key, int value)
        {
            this.key = key;
            this.value = value;
        }
    }
    
    Node head = new Node(0, 0);
    Node tail = new Node(0, 0);

    Map<Integer, Node> map = new HashMap<>();
    int cap; // capacity

    public LRUCache(int capacity) {
        cap = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(map.containsKey(key))
        {
            Node temp = map.get(key);
            remove(temp);
            insert(temp);
            return temp.value;
        }
        else
            return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            remove(map.get(key));
        }

        if(map.size() == cap)
        {
            remove(tail.prev);
        }

        insert(new Node(key, value));
    }

    private void insert(Node node)
    {
        map.put(node.key, node);
        Node headNext = head.next;
        head.next = node;
        node.next = headNext;
        node.prev = head;
        headNext.prev = node;
    }

    private void remove(Node node)
    {
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */