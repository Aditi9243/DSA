//Recursion
class Solution {
    public int numDecodings(String s) {
        return (s.length()==0)? 0 : solution(0, s);
    }
    
    private int solution(int i, String str)
    {
        if(i == str.length())
            return 1;
        if(str.charAt(i) == '0')
            return 0;
        
        int recAns = solution(i+1, str);
        if(i < str.length()-1 && (str.charAt(i)=='1' || str.charAt(i)=='2' && str.charAt(i+1)<'7'))
            recAns += solution(i+2, str);
        
        return recAns;
    }
}

//Memoization
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int []dp = new int[n];
        Arrays.fill(dp, -1);
        return (s.length()==0)? 0 : solution(0, s, dp);
    }
    
    private int solution(int i, String str, int []dp)
    {
        if(i == str.length())
            return 1;
        if(str.charAt(i) == '0')
            return 0;
        
        if(dp[i] != -1)
            return dp[i];
        
        int recAns = solution(i+1, str, dp);
        if(i < str.length()-1 && (str.charAt(i)=='1' || str.charAt(i)=='2' && str.charAt(i+1)<'7'))
            recAns += solution(i+2, str, dp);
        
        return dp[i]=recAns;
    }
}

//DP
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int []dp = new int[n+1];
        dp[n] = 1; //always 1 hi possible h
        for(int i=n-1; i>=0; i--)
        {
            if(s.charAt(i) != '0')
            {
                dp[i] = dp[i+1];
                if(i < n-1 && (s.charAt(i)=='1' || s.charAt(i)=='2' && s.charAt(i+1)<'7'))
                    dp[i] += dp[i+2];
            }
        }
        
        return dp[0];
    }
}

//DP - constant space
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int dp1 = 1, dp2 = 0;
        for(int i=n-1; i>=0; i--)
        {
            int dp = s.charAt(i)=='0' ? 0 : dp1;
            
            if(i < n-1 && (s.charAt(i)=='1' || s.charAt(i)=='2' && s.charAt(i+1)<'7'))
                dp += dp2;
            
            dp2 = dp1;
            dp1 = dp;            
        }
        
        return dp1;
    }
}
