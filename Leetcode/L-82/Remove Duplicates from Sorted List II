/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode ans = new ListNode(-1);
        ans.next = head;
        ListNode prev = ans;
        ListNode curr = head;
        
        while(curr != null)
        {
            while(curr.next != null && curr.val == curr.next.val)
            {
                curr = curr.next;
            }

            if(prev.next == curr)
                prev = prev.next;

            else
                prev.next = curr.next;
            
            curr = curr.next;
        }
        return ans.next;
    }
}

//slow fast pointer - better solution
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(-1);
        ListNode fast = head;
        ListNode slow = dummy;
        slow.next = fast;
        
        while(fast != null)
        {
            while(fast.next != null && fast.val == fast.next.val)
            {
                fast = fast.next;
            }
            if(slow.next != fast)
            {
                slow.next = fast.next;
                fast = slow.next;
            }
                
            else
            {
                slow = slow.next;
                fast = fast.next;
            }
            
        }
        return dummy.next;
    }
}

//Try recursive solution too*****