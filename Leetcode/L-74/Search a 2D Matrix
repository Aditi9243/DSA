class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int r = 0, c = matrix[0].length-1;
        while(r<matrix.length && c>=0)
        {
            if(matrix[r][c] == target)
                return true;
            else if(matrix[r][c] < target)
                r++;
            else
                c--;
        }
        return false;
    }
}

//Binary Search
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //matrix[x][y] → a[x * m + y] ==> n * m matrix converted into an array
        //a[x] → matrix[x / m][x % m] ==> array converted into n * m matrix

        int n = matrix.length;
        int m = matrix[0].length;

        int l = 0, r = (n*m)-1;

        while(l != r)
        {
            int mid = (l+r-1)/2;
            if(matrix[mid / m][mid % m] < target)
                l = mid+1;

            else
                r = mid;
        }

        return (matrix[r / m][r % m] == target);
    }
}

//Another way of binary search
//l = Left and r = Right
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;

        int l = 0, r = (n*m)-1;

        while(l <= r)
        {
            int mid = l + (r-l)/2;
            if(matrix[mid / m][mid % m] == target)
                return true;
            else if(matrix[mid / m][mid % m] < target)
                l = mid+1;

            else
                r = mid-1;
        }

        return false;
    }
}