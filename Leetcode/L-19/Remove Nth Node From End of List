/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private int size(ListNode node)
    {
        int count = 0;
        while(node != null)
        {
            count++;
            node = node.next;
        }
        return count;
    }
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(n==1 && head.next == null || head == null)
            return null;
        
        int count = size(head);
        if(count==n)
        {
            head = head.next;
            return head;
        }
        
        ListNode p = head, q = null;
        int i=0;
        while(i < count-n)
        {
            q = p;
            p = p.next;
            i++;
        }
        
        q.next = p.next;
        p.next = null;
        return head;
    }
    
//     public ListNode removeNthFromEnd(ListNode head, int n) {
    
//     ListNode start = new ListNode(0);
//     ListNode slow = start, fast = start;
//     slow.next = head;
    
//     //Move fast in front so that the gap between slow and fast becomes n
//     for(int i=1; i<=n+1; i++)   {
//         fast = fast.next;
//     }
//     //Move fast to the end, maintaining the gap
//     while(fast != null) {
//         slow = slow.next;
//         fast = fast.next;
//     }
//     //Skip the desired node
//     slow.next = slow.next.next;
//     return start.next;
// }
}