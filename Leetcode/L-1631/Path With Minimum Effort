//  Dijikstra

class Solution {
    int[] DIR = new int[]{0, 1, 0, -1, 0};
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length, n = heights[0].length;
        int[][] dist = new int[m][n];

        for (int i = 0; i < m; i++) 
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        minHeap.offer(new int[]{0, 0, 0}); // distance, row, col
        dist[0][0] = 0;
        
        while (!minHeap.isEmpty()) {
            int[] top = minHeap.poll();
            int d = top[0], r = top[1], c = top[2];

            if (d > dist[r][c]) continue; // this is an outdated version -> skip it

            if (r == m - 1 && c == n - 1) return d; // Reach to bottom right

            for (int i = 0; i < 4; i++) {

                int nr = r + DIR[i];
                int nc = c + DIR[i + 1];
                if (nr >= 0 && nr < m && nc >= 0 && nc < n) {
                    int newDist = Math.max(d, Math.abs(heights[nr][nc] - heights[r][c]));
                    if (dist[nr][nc] > newDist) {
                        dist[nr][nc] = newDist;
                        minHeap.offer(new int[]{dist[nr][nc], nr, nc});
                    }
                }
            }
        }
        return 0; // Unreachable code, Java require to return interger value.
    }
}

// Binary Search + DFS

class Solution {
    private int[][] DIR = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    private int m, n;
    
    public int minimumEffortPath(int[][] heights) {
        m = heights.length;
        n = heights[0].length;
        
        int left = 0;
        int right = (int)1e6;
        int ans = right;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (canReachDestination(mid, heights)) {
                right = mid - 1; // Try to find better result on the left side
                ans = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return ans;
    }
    
    private boolean canReachDestination(int threshold, int[][] heights) {
        boolean[][] visited = new boolean[m][n];
        return dfs(0, 0, visited, threshold, heights);
    }
    
    private boolean dfs(int r, int c, boolean[][] visited, int threshold, int[][] heights) {
        if (r == m - 1 && c == n - 1) {
            return true; // Reach destination
        }
        
        visited[r][c] = true;
        
        for (int i = 0; i < 4; i++) {
            int nr = r + DIR[i][0];
            int nc = c + DIR[i][1];
            
            if (nr < 0 || nr == m || nc < 0 || nc == n || visited[nr][nc]) {
                continue;
            }
            
            if (Math.abs(heights[nr][nc] - heights[r][c]) <= threshold && dfs(nr, nc, visited, threshold, heights)) {
                return true;
            }
        }
        
        return false;
    }
}