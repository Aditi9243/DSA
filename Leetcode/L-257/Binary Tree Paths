/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        if(root == null)
            return ans;
        
        helper(ans, "", root);
        return ans;
    }

    private void helper(List<String> ans, String s, TreeNode root)
    {
        if(root == null)
            return;

        if(s.isEmpty())    //s == ""
            s += root.val;
        else
            s += "->"+root.val;

        if(root.left == null && root.right == null)
        {
            ans.add(s);
            return;
        }

        helper(ans, s, root.left);
        helper(ans, s, root.right);
    }
}

//little bit change in recursive call
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        if(root == null)
            return ans;
        
        helper(ans, "", root);
        return ans;
    }

    private void helper(List<String> ans, String s, TreeNode root)
    {
        if(root.left == null && root.right == null) //leaf node
        {
            ans.add(s + root.val);
        }

        if(root.left != null)
            helper(ans, s+root.val+"->", root.left);

        if(root.right != null)
            helper(ans, s+root.val+"->", root.right);
    }
}

//https://leetcode.com/problems/binary-tree-paths/solutions/68278/my-java-solution-in-dfs-bfs-recursion/
//dfs bfs recursive without helper func