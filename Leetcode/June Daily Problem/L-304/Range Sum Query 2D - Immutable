//Brute force
class NumMatrix {
    private int A[][];

    public NumMatrix(int[][] matrix) {
        
        A = new int[matrix.length][matrix[0].length];
        for(int i=0; i<matrix.length; i++)
            for(int j=0; j<matrix[0].length; j++)
                A[i][j] = matrix[i][j];

    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;
        for(int i=row1; i<=row2; i++)
        {
            for(int j=col1; j<=col2; j++)
                sum += A[i][j];
        }
        
        return sum;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */

//DP
class NumMatrix {
    private int [][]dp;

    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return;
        
        
        int row = matrix.length;
        int col = matrix[0].length;
        
        dp = new int[row+1][col+1];
        for(int i=1; i<=row; i++)
        {
            for(int j=1; j<=col; j++)
            {
                dp[i][j] = dp[i-1][j]+dp[i][j-1] -dp[i-1][j-1] + matrix[i-1][j-1];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        //Assuming row1 ≤ row2 and col1 ≤ col2
        return dp[row2+1][col2+1] - dp[row1][col2+1] - dp[row2+1][col1] + dp[row1][col1];
        
//         int rowMin = Math.min(row1, row2);
//         int rowMax = Math.max(row1, row2);
        
//         int colMin = Math.min(col1, col2);
//         int colMax = Math.max(col1, col2);
//         return dp[rowMax+1][colMax+1] - dp[rowMin][colMax+1] - dp[rowMax+1][colMin] + dp[rowMin][colMin];
    }
}
