class Solution {
    private int count = 0;
    
    public int totalNQueens(int n) {
        int [][]chess = new int[n][n];  //0-blank 1-queen
        solution(chess, 0);
        return count;
    }
    
    public void solution(int [][]chess, int row)
    {
        if(row == chess.length)
        {
            count++;
            return;
        }
        
        for(int col=0; col<chess.length; col++)
        {
            if(isSafe(chess, row, col))
            {
                chess[row][col] = 1;
                solution(chess, row+1);
                chess[row][col] = 0;
            }
        }
    }
    
    private boolean isSafe(int [][]chess, int r, int c)
    {
        //i-1, j+1
        for(int i=r-1, j=c+1; i>=0 && j<chess.length; i--, j++)
        {
            if(chess[i][j] == 1)
                return false;
        }
        
        //i-1, j
        for(int i=r-1, j=c; i>=0; i--)
        {
            if(chess[i][j] == 1)
                return false;
        }
        
        //i-1, j-1
        for(int i=r-1, j=c-1; i>=0 && j>=0; i--, j--)
        {
            if(chess[i][j] == 1)
                return false;
        }
        
        return true;
    }
}