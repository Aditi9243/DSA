class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        solution(ans, new ArrayList<>(), nums, 0);
        return ans;
    }
    
    public void solution(List<List<Integer>> ans, List<Integer> temp, int []arr, int start)
    {
        ans.add(new ArrayList<>(temp));
        
        for(int i=start; i<arr.length; i++)
        {
            temp.add(arr[i]);
            solution(ans, temp, arr, i+1);
            temp.remove(temp.size()-1);
        }
    }
}

//Another method without backtracking and recursion
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<>());
        
        for(int num : nums)
        {
            int size = ans.size();
            for(int i=0; i<size; i++)
            {
                List<Integer> temp = new ArrayList<>(ans.get(i));
                temp.add(num);
                ans.add(temp);
            }
        }
        
        return ans;
    }
}