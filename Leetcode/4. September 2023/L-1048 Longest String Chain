// DFS with Memo

class Solution {
    public int longestStrChain(String[] words) {
        Map<String, Integer> map = new HashMap<>();
        Set<String> set = new HashSet<>();
        int ans = 0;

        for(String word : words)
            set.add(word);
        
        for(String word : words)
            ans = Math.max(ans, helper(map, set, word));

        return ans;
    }

    private int helper(Map<String, Integer> map, Set<String> set, String word)
    {
        if(map.containsKey(word))
            return map.get(word);

        int count = 0;
        for(int i=0; i<word.length(); i++)
        {
            String next = word.substring(0, i) + word.substring(i+1);
            if(set.contains(next))
            {
                count = Math.max(count, helper(map, set, next));
            }
        }
        map.put(word, count+1);
        return count+1;
    }
}

// DP

class Solution {
    public int longestStrChain(String[] words) {
        Map<String, Integer> map = new HashMap<>();
        Arrays.sort(words, (a,b)->a.length() - b.length());
        int ans = 0;
        for(String word : words)
        {
            int best = 0;

            for(int i=0; i<word.length(); i++)
            {
                String prev = word.substring(0, i) + word.substring(i+1);
                best = Math.max(best, map.getOrDefault(prev, 0) + 1);
            }

            map.put(word, best);
            ans = Math.max(ans, best);
        }

        return ans;
    }
}