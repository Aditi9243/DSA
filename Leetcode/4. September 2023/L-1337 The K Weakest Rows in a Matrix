class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;
        
        int[][] rows = new int[m][2];
        for (int i = 0; i < m; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    count++;
                } else {
                    break;
                }
            }
            rows[i] = new int[]{i, count};
        }
        
        Arrays.sort(rows, (a, b) -> {
            if (a[1] != b[1]) {
                return Integer.compare(a[1], b[1]);
            } else {
                return Integer.compare(a[0], b[0]);
            }
        });
        
        int[] ans = new int[k];
        for (int i = 0; i < k; i++) {
            ans[i] = rows[i][0];
        }
        
        return ans;    
    }
}

//  Binary Search + Heap

class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] != b[0] ? b[0] - a[0] : b[1] - a[1]);
        int[] ans = new int[k];
        
        for (int i = 0; i < mat.length; i++) {
            pq.add(new int[] {numOnes(mat[i]), i});
            if (pq.size() > k)
                pq.remove();
        }
        
        while (k > 0)
            ans[--k] = pq.remove()[1];
        
        return ans;   
    }

    private int numOnes(int[] row) {
        int low = 0;
        int high = row.length;
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            
            if (row[mid] == 1)
                low = mid + 1;
            else
                high = mid;
        }
        
        return low;
    }
}