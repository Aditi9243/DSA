class Solution {
    public double champagneTower(int poured, int query_row, int query_glass) {
        if(poured == 0)
            return 0;

        List<Double> prevRow = new ArrayList<>(List.of((double) poured));

        while(query_row-- > 0)
        {
            double champagneInEnds = Math.max(0, (prevRow.get(0)-1)/2);
            List<Double> currRow = new ArrayList<>();

            currRow.add(champagneInEnds);   //add the first glass

            for(int i=1; i<prevRow.size(); i++)
            {
                double curr = Math.max(0, (prevRow.get(i - 1) - 1) / 2) + Math.max(0, (prevRow.get(i) - 1) / 2);    
                // flow from top-left glass + from top-right glass

                currRow.add(curr);
            }

            currRow.add(champagneInEnds);   //add the last glass
            prevRow = currRow;
        }

        return Math.min(1, prevRow.get(query_glass));   //  max champagne can be 1
    }
}