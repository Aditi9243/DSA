// Intelligent BFS

class Solution {
    public int shortestPathLength(int[][] graph) {
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        int n = graph.length;
        
        // Adjency list of graph
        for(int i=0;i<n;i++){
            if(!hm.containsKey(i)){
                hm.put(i, new ArrayList<Integer>());
            }
            
            int m = graph[i].length;
            for(int j=0;j<m;j++){
                hm.get(i).add(graph[i][j]);
            }
            
        }

        //dist 2d array
        //row: bitmask -> visited node set bits are 1
        //column: leading node
        int row = (int)Math.pow(2,n);
        int col = n;
        int dist[][] = new int[row][col];
        
        for(int i=0;i<row;i++){
            Arrays.fill(dist[i], -1);
        }

        //Queue: [{leading node 1, mask},{leading node 2, mask} ... ]
        LinkedList<int[]> q = new LinkedList<>();
        
        for(int i=0;i<n;i++){
            
            int lead = i;
            int mask = setbit(0,i);
            
            q.add(new int[]{lead, mask});
            dist[mask][lead] = 0;
        }

        // Applying simulatneous BFS
        while(q.size()>0){
            int size = q.size();
            for(int i=0;i<size;i++)
            {
                int[] path = q.remove();   
                int lead = path[0];
                int mask = path[1];
                
                if(mask == row-1){   //all nodes visited
                    return dist[mask][lead];
                }
                
                // iterate over neighbours of lead
                if(hm.containsKey(lead))
                {
                    for(int child: hm.get(lead))
                    {
                        int newlead = child;
                        int newmask = setbit(mask, newlead);

                        // avoid cycle: intelligent bfs : checking if this set is already visited 
                        // set : lead, mask(visited nodes)
                        if(dist[newmask][newlead]!=-1){
                            continue;
                        }

                        dist[newmask][newlead] = dist[mask][lead]+1;
                        q.add(new int[]{newlead, newmask});
                    }
                }
            }
            
        }
        return 1221;
    }

    private int setbit(int mask, int i){
        return mask|(1<<i);
    }
}

//  ================================================================

class Solution {
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        int allVisitedMask = (1 << n) - 1;
        Queue<Pair<Integer, Pair<Integer, Integer>>> Q = new LinkedList<>();
        Set<Pair<Integer, Integer>> seen = new HashSet<>();

        // Initially push all nodes in Queue to start the path with all nodes;
        for (int i = 0; i < n; i++) {
            Q.add(new Pair<>(i, new Pair<>(0, 1 << i)));
            seen.add(new Pair<>(i, 1 << i));
        }
        
        while (!Q.isEmpty()) {
            Pair<Integer, Pair<Integer, Integer>> curr = Q.poll();
            int node = curr.getKey();
            int dist = curr.getValue().getKey();
            int mask = curr.getValue().getValue();
            
            // If all nodes are visited
            if (mask == allVisitedMask)
                return dist;
            
            // Go through all neighbors
            for (int nei : graph[node]) {
                int nextMask = mask | (1 << nei);
                if (!seen.contains(new Pair<>(nei, nextMask))) {
                    Q.add(new Pair<>(nei, new Pair<>(dist + 1, nextMask)));
                    seen.add(new Pair<>(nei, nextMask));
                }
            }
        }
        
        return 0;
    }
}

//  ================================================================

class Solution {
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        int fullMask = (1 << n) - 1;
        
        Set<String> visited = new HashSet<>();
        Queue<Node> que = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            Node node = new Node(i, 1<<i);
            que.offer(node);
            visited.add(node.toString());
        }
        
        int level = 0;
        while (!que.isEmpty()) {
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Node node = que.poll();
                if (node.mask == fullMask) return level;
                for (int next : graph[node.id]) {
                    Node nextNode = new Node(next, node.mask | (1 << next));
                    if (visited.contains(nextNode.toString())) continue;
                    que.offer(nextNode);
                    visited.add(nextNode.toString());
                }
            }
            level++;
        }
        
        return level;
    }
    
    class Node {
        int id;
        int mask;
        
        Node(int id, int mask){
            this.id = id; 
            this.mask = mask;
        }
        
        public String toString() {
            return id + " " + mask;
        }
    }
}