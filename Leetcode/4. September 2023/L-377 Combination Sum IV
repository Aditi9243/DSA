//Recursive - TLE

class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(target == 0)
            return 1;

        int ans = 0;
        for(int i=0; i<nums.length; i++)
        {
            if(target >= nums[i])
            {
                ans += combinationSum4(nums, target-nums[i]);
            }
        }

        return ans;
    }
}

// Top - down

class Solution {
    private int[] dp;
    public int combinationSum4(int[] nums, int target) {
        if(target == 0)
            return 1;

        dp = new int[target+1];
        Arrays.fill(dp,-1);
        dp[0] = 1;

        return helper(nums, target);
    }

    private int helper(int[] nums, int target)
    {
        if(dp[target] != -1)
            return dp[target];

        int ans = 0;
        for(int i=0; i<nums.length; i++)
        {
            if(target >= nums[i])
            {
                ans += helper(nums, target-nums[i]);
            }
        }

        return dp[target] = ans;
    }
}

// Bottom - up

class Solution {
    public int combinationSum4(int[] nums, int target) {
        //Bottom up
        int[] dp = new int[target+1];

        dp[0] = 1;
        for(int i=1; i<dp.length; i++)
        {
            for(int j=0; j<nums.length; j++)
            {
                if(i-nums[j] >= 0)
                    dp[i] += dp[i-nums[j]];
            }
        }

        return dp[target];
    }
}