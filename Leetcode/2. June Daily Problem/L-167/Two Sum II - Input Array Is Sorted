//Brute force
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        // int ans[];
        for(int i=0; i<numbers.length; i++)
        {
            for(int j=i+1; j<numbers.length; j++)
            {
                if(numbers[i] + numbers[j] == target)
                {
                    int []ans = new int[]{i+1, j+1};
                    return ans;
                }
            }
        }
        
        return new int[2];
    }
}

//Given array is sorted, so need to use better approach
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int []ans = new int[2];
        int l = 0, r = numbers.length-1;
        
        while(l < r)
        {
            if(numbers[l] + numbers[r] == target)
            {
                ans[0] = l+1;
                ans[1] = r+1;
                break;
            }
            else if(numbers[l] + numbers[r] < target)
                l++;
            else
                r--;
        }
        
        return ans;
    }
}

//Space complexity reduced
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int l = 0, r = numbers.length-1;
        
        while(numbers[l] + numbers[r] != target)
        {
            if(numbers[l] + numbers[r] < target)
                l++;
            else
                r--;
        }
        
        return new int[]{l+1, r+1};
    }
}