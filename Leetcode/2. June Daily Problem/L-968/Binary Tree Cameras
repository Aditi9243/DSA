/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans = 0;
    public int minCameraCover(TreeNode root) {
        return (dfs(root) < 1 ? ans+1 : ans);
    }
    
    private int dfs(TreeNode root)
    {
        if(root == null)
            return 2;
        
        int left = dfs(root.left);
        int right = dfs(root.right);
        if(left == 0 || right == 0)
        {
            ans++;
            return 1;
        }
        
        return (left == 1 || right == 1)? 2 : 0;
    }
}

// Return 0 if it's a leaf.
// Return 1 if it's a parent of a leaf, with a camera on this node.
// Return 2 if it's coverd, without a camera on this node.

//Same code, only with more clearity
class Solution {
    int notCover = 0, hasCamera = 1, covered = 2; 
    int ans = 0;
    public int minCameraCover(TreeNode root) {
        return (solution(root) < 1 ? ans+1 : ans);
    }
    
    private int solution(TreeNode root)
    {
        if(root == null)
            return covered;
        
        int left = solution(root.left);
        int right = solution(root.right);
        if(left == notCover || right == notCover)
        {
            ans++;
            return hasCamera;
        }
        
        return (left == hasCamera || right == hasCamera)? covered : notCover;
    }
}