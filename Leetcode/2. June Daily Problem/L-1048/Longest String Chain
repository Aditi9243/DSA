//dp
class Solution {
    public int longestStrChain(String[] words) {
        Map<String, Integer> dp = new HashMap<>();
        Arrays.sort(words, (a, b)->a.length() - b.length());
        int max = 0;
        for(String word : words)
        {
            int best = 0;
            for(int i=0; i<word.length(); i++)
            {
                String str = word.substring(0, i) + word.substring(i+1);
                best = Math.max(best, dp.getOrDefault(str, 0)+1);
            }
            dp.put(word, best);
            max = Math.max(max, best);
        }
        
        return max;
    }
}

//DFS + Memoization
class Solution {
    public int longestStrChain(String[] words) {
        int ans = 0;
        Set<String> set = new HashSet<>();
        Map<String, Integer> map = new HashMap<>();
        
        for(String word : words)
            set.add(word);
        
        for(String word : words)
            ans = Math.max(ans, helper(map, set, word));
        
        return ans;
    }
    
    private int helper(Map<String, Integer> map, Set<String> set, String word)
    {
        if(map.containsKey(word))
            return map.get(word);
        int count = 0;
        for(int i=0; i<word.length(); i++)
        {
            String next = word.substring(0, i) + word.substring(i+1);
            if(set.contains(next))
            {
                count = Math.max(count, helper(map, set, next));
            }
        }
        
        map.put(word, count+1);
        return count+1;
    }
}

//https://leetcode.com/problems/longest-string-chain/discuss/1213855/JS-Python-Java-C%2B%2B-or-Fast-Set-DP-Map-Solution-w-Explanation

//Longest increasing subsequence type method - giving tle****
class Solution {
    public int longestStrChain(String[] words) {
        //(a, b)->a.length() - b.length()
        Arrays.sort(words, new StringByLengthComparator());
        int []dp = new int[words.length];
        int max = 0;
        for(int i=0; i<words.length;)
        {
            dp[i] = 1;
            for(int j=i-1; j>=0 && words[i].length()-words[j].length()<=1; j--)
            {
                if(isPredessor(words[j], words[i]))
                {
                    dp[i] = Math.max(dp[i], dp[j]+1);
                }
            }
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
    
    private boolean isPredessor(String s1, String s2)
    {
        if(s1.length() == s2.length())
            return false;
        
        int diff = 0;
        for(int i=0, j=0; i<s1.length(); )
        {
            if(s1.charAt(i) == s2.charAt(j))
            {
                i++;
                j++;
            }
            else
            {
                diff++;
                if(diff > 1)
                    return false;
                j++;
            }
        }
        
        return true;
    }
    
    private static class StringByLengthComparator implements Comparator<String>
    {
        public int compare(String s1, String s2)
        {
            return Integer.compare(s1.length(), s2.length());
        }
    }
}