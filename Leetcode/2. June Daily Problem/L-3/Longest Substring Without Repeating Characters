//Using hashmap
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0)
            return 0;
        
        HashMap<Character, Integer> hm = new HashMap<>();
        int max = 0;
        for(int i=0, j=0; i<s.length(); i++)
        {
            if(hm.containsKey(s.charAt(i)))
            {
                j = Math.max(j, hm.get(s.charAt(i))+1);
            }
            
            hm.put(s.charAt(i),i);
            max = Math.max(max, i-j+1);
        }
        
        return max;
    }
}

//Using array - Best
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0)
            return 0;
        
        int []arr = new int[256];
        int max = 0;
        for(int i=0, j=0; i<s.length(); i++)
        {
            j = (arr[s.charAt(i)]>0)? Math.max(j, arr[s.charAt(i)]) : j;
                       
            arr[s.charAt(i)] = i+1;
            max = Math.max(max, i-j+1);
        }
        
        return max;
    }
}

//Using Queue
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0)
            return 0;
        
        Queue<Character> queue = new LinkedList<>();
        int max = 0;
        
        for(char ch : s.toCharArray())
        {
            while(queue.contains(ch))
            {
                queue.remove();
            }
            queue.add(ch);
            max = Math.max(max, queue.size());
        }
        
        return max;
    }
}

//Using hashset
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0)
            return 0;
        
        Set<Character> window = new HashSet<>();
        int max = 0;
        int left = 0, right = 0;
        
       while(right < s.length())
       {
           while(window.contains(s.charAt(right)))
           {
               window.remove(s.charAt(left++));
           }
           
           window.add(s.charAt(right++));
           max = Math.max(max, right-left);
       }
        
        return max;
    }
}