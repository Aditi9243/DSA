//Lowest Common Subsequence

class Solution {
    public int minDistance(String word1, String word2) {
        int dp[][] = new int[word1.length()+1][word2.length()+1];
        
        for(int i=1; i<dp.length; i++)
        {
            for(int j=1; j<dp[0].length; j++)
            {
                // if(i == 0 || j == 0)
                //     dp[i][j] = 0;
                
                // else
                dp[i][j] = (word1.charAt(i-1) == word2.charAt(j-1)) ? dp[i-1][j-1] + 1 : Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        int val = dp[word1.length()][word2.length()];
        return word1.length() + word2.length() - 2*val;
    }
}

//Another approach
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        if(m < n)
        {
            String tempStr = word1;
            word1 = word2;
            word2 = tempStr;
            int temp = n;
            n = m;
            m = temp;
        }
        char[] WA1 = word1.toCharArray(), WA2 = word2.toCharArray();
        int[] dpLast = new int[n+1], dpCurr = new int[n+1];
        
        for(char c1 : WA1)
        {
            for(int j = 0; j < n; j++)
            {
                dpCurr[j+1] = (c1 == WA2[j]) ? dpLast[j]+1 : Math.max(dpCurr[j], dpLast[j+1]);
                
            }
            
            int[] temp = dpLast;
            dpLast = dpCurr;
            dpCurr = temp;
            
        }
        
        return m + n - 2*dpLast[n];
    }
}

//https://leetcode.com/problems/delete-operation-for-two-strings/discuss/1195718/JS-Python-Java-C%2B%2B-or-Optimized-LCS-Solution-w-Explanation
//https://leetcode.com/problems/delete-operation-for-two-strings/discuss/1195726/C%2B%2BPythonJava-Short-and-Easy-Solutions-w-Explanation-or-Optimization-from-Brute-Force-to-DP
