/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    //*****************BUBBLE SORT*****************
    // private int size(ListNode node)
    // {
    //     int count = 0;
    //     while(node != null){
    //         node = node.next;
    //         count++;
    //     }
    //     return count;    
    // }
    // public ListNode sortList(ListNode head) {
        
    //     int size = size(head);
    //     while(size > 0)
    //     {
    //         ListNode curr = head;
    //         while(curr.next != null)
    //         {
    //             if(curr.val > curr.next.val)
    //             {
    //                 int temp = curr.val;
    //                 curr.val = curr.next.val;
    //                 curr.next.val = temp;
    //             }
    //             curr = curr.next;
    //         }
    //         size--;
    //     }
        
    //     return head;
    // }

    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
        {
            return head;
        }
        
        //Step1 - Divide linkedlist into 2 parts
        ListNode prev = null, slow = head, fast = head;
        while(fast != null && fast.next != null)
        {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        prev.next = null;
        
        //Step2 - Sort each half
        ListNode left = sortList(head);
        ListNode right = sortList(slow);
        
        //Step3 - Merge the results and return
        return mergeList(left, right);
        
    }
    
    private ListNode mergeList(ListNode l1, ListNode l2)
    {
        ListNode ans = new ListNode(0), ptr = ans;
        while(l1 != null && l2 != null)
        {
            if(l1.val < l2.val)
            {
                ptr.next = l1;
                l1 = l1.next;
            }
            else
            {
                ptr.next = l2;
                l2 = l2.next;
            }
            ptr = ptr.next;
        }
        
        if(l1 != null)
        {
            ptr.next = l1;
        }
        
        if(l2 != null)
        {
            ptr.next = l2;
        }
        
        return ans.next;
    }
}