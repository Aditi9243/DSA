/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Using stack
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();

        while(l1 != null)
        {
            s1.push(l1.val);
            l1 = l1.next;
        }

        while(l2 != null)
        {
            s2.push(l2.val);
            l2 = l2.next;
        }

        ListNode ans = null;
        
        int sum = 0;
        while(!s1.isEmpty() || !s2.isEmpty() || sum != 0)
        {
            if(!s1.isEmpty())
                sum += s1.pop();

            if(!s2.isEmpty())
                sum += s2.pop();
            
            ListNode temp = new ListNode(sum%10);
            temp.next = ans;
            ans = temp;

            sum = sum/10;
        }

        return ans;
    }
}

//Without Stack
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int size1 = 0, size2 = 0;
        for (ListNode node = l1; node != null; node = node.next) size1++;
        for (ListNode node = l2; node != null; node = node.next) size2++;

        if(size1 < size2)
        {
            //exchange the sizes and linkedlist
            int s = size1;
            size1 = size2;
            size2 = s;
            
            ListNode l = l1;
            l1 = l2;
            l2 = l;
        }

        //Add the extra nodes
        ListNode ans = null;    
        for (int i = 0; i < size1 - size2; i++) {
            ans = new ListNode(l1.val, ans);
            l1 = l1.next;
        }

        //Add the sum value of both linkedlist nodes
        for (int i = 0; i < size2; i++) {
            // ans = new ListNode(l1.val + l2.val, ans);
            ListNode temp = new ListNode(l1.val + l2.val);
            temp.next = ans;
            ans = temp;
            l1 = l1.next;
            l2 = l2.next;
        }
        
        int c = 0;  //carry
        ListNode curr = ans;
        ans = null;
        while(curr != null)
        {
            int val = curr.val + c;
            c = val/10;
            val %= 10;
            
            curr.val = val;
            ListNode temp = curr.next;
            curr.next = ans;
            ans = curr;
            curr = temp;
        }

        if(c > 0)
        {
            ans = new ListNode(c, ans);
        }
        return ans;
    }
}

//TLE Code
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);

        ListNode ans = null;
        ListNode ptr = ans;

        int c = 0;
        while(l1 != null || l2 != null || c != 0)
        {
            int sum = c;
            if(l1 != null)
                sum += l1.val;

            if(l2 != null)
                sum += l2.val;
            
            ListNode temp = new ListNode(sum%10);

            //Add the element to the begining of ans linkedlist
            temp.next = ptr;
            ptr = temp;

            c = sum/10;
        }

        ans = ptr;
        return ans;
    }

    private ListNode reverse(ListNode l)
    {
        ListNode prev = null;
        ListNode curr = l;

        while(curr != null)
        {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        l = prev;
        return l;
    }
}