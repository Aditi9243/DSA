//DP
class Solution {
    public int fib(int n) {
        if(n <= 1)
            return n;
        int []dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i=2; i<dp.length; i++)
        {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];        
    }
}

//Memoization
class Solution {
    public int fib(int n) {
        if(n <= 1)
            return n;
        
        return helper(n, new int[n+1]);
    }
    
    public int helper(int n, int []dp)
    {
        if(n<=1)
            return dp[n] = n;
        
        if(dp[n] != 0)
            return dp[n];
        
        return dp[n] = helper(n-1, dp) + helper(n-2, dp);
    }
}

//Recursive
class Solution {
    public int fib(int n) {
        if(n <= 1)
            return n;
        
        return fib(n-1) + fib(n-2);
        
    }
}