//Using 2 Queues
class MyStack {

    private Queue<Integer> q1 = new LinkedList<>();
    private Queue<Integer> q2 = new LinkedList<>();
    
    public MyStack() {
        
    }
    
    public void push(int x) {
        if(q1.isEmpty())
        {
            q1.add(x);
            for(int i=0; i<q2.size(); i++)
                q1.add(q2.remove());
        }
        else
        {
            q2.add(x);
            for(int i=0; i<q1.size(); i++)
                q2.add(q1.remove());
        }        
    }
    
    public int pop() {
        if(q1.isEmpty())
            return q2.remove();
        else
            return q1.remove();
    }
    
    public int top() {
        return (q1.isEmpty()) ? q2.peek() : q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty() && q2.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */

 //Using 1 queue
 class MyStack {

    private Queue<Integer> q = new LinkedList<>();
    
    public MyStack() {
        
    }
    
    public void push(int x) {
        q.add(x);
        for(int i=0; i<q.size()-1; i++)
            q.add(q.remove());
        
    }
    
    public int pop() {
        return q.remove();
    }
    
    public int top() {
        return q.peek();
    }
    
    public boolean empty() {
        return q.isEmpty();
    }
}
