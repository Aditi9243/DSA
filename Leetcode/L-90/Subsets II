class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans =  new ArrayList<>();
        Arrays.sort(nums);
        solution(ans, new ArrayList<>(), nums, 0);
        return ans;
    }
    
    public void solution(List<List<Integer>> ans, List<Integer> temp, int []arr, int start)
    {
        ans.add(new ArrayList<>(temp));
        for(int i=start; i<arr.length; i++)
        {
            if(i>start && arr[i] == arr[i-1])
                continue;
            temp.add(arr[i]);
            solution(ans, temp, arr, i+1);
            temp.remove(temp.size()-1);
        }
    }
}

//Iterative solution
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans =  new ArrayList<>();
        ans.add(new ArrayList<>());
        
        int start = 0, size = 0;
        for(int i=0; i<nums.length; i++)
        {
            start = (i>0 && nums[i] == nums[i-1]) ? size : 0;
            
            size = ans.size();
            for(int j=start; j<size; j++)
            {
                List<Integer> temp = new ArrayList<>(ans.get(j));
                temp.add(nums[i]);
                ans.add(temp);
            }
        }
        
        return ans;
    }
}