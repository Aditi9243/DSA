//Iterative solution - better
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        if(nums.length <= 2)
            return ans;
        Arrays.sort(nums);
        
        for(int i=0; i<nums.length-2; i++)
        {            
            if(i>0 && nums[i] == nums[i-1])
                continue;
            
            int j=i+1, k=nums.length-1;
            int target = -nums[i];
            while(j < k)
            {
                if(nums[j] + nums[k] == target)
                {
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                    while(j < k && nums[j] == nums[j-1])    j++;
                    while(j < k && nums[k] == nums[k+1])    k--;
                }
                else if(nums[j] + nums[k] > target)
                    k--;
                else
                    j++;
            }
        }
        return ans;
    }
}

//Since array is sorted
//nums[i] > 0 -> break
//if array last element is -ve then no ans is possible

//Using hashset
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        if(nums.length <= 2)
            return ans;
        Arrays.sort(nums);
        
        for(int i=0; i<nums.length-2; i++)
        {            
            if(i>0 && nums[i] == nums[i-1])
                continue;
            twoSum(ans, nums, i+1, nums.length-1, -nums[i]);
        }
        return ans;
    }

    private void twoSum(List<List<Integer>> ans, int []nums, int low, int high, int target)
    {
        if(low > high)
            return;
        HashSet<Integer> set = new HashSet<>();
        for(int i=low; i<=high; i++)
        {
            if(set.contains(target-nums[i]))
            {
                ans.add(Arrays.asList(-target, nums[i], target-nums[i]));
                while(i+1 <= high && nums[i] == nums[i+1])
                    i++;
            }
            else
                set.add(nums[i]);
        }
    }
}