/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        
        int newSum = targetSum - root.val;
        if(newSum == 0 && root.left == null && root.right == null)
            return true;
        
        boolean left = hasPathSum(root.left, newSum);
        boolean right = hasPathSum(root.right, newSum);
        return left||right;
    }
}

//little bit optimized
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        
        if(root.left == null && root.right == null)
            return targetSum == root.val;
        
        return hasPathSum(root.left, targetSum-root.val) || hasPathSum(root.right, targetSum-root.val);
    }
}

//iterative
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        while(!s.isEmpty())
        {
            TreeNode curr = s.pop();
            if(curr.left == null && curr.right == null && curr.val == targetSum)
            {
                return true;
            }
            
            if(curr.left != null)
            {
                curr.left.val += curr.val;
                s.push(curr.left);
            }
            
            if(curr.right != null)
            {
                curr.right.val += curr.val;
                s.push(curr.right);
            }
        }
        
        return false;
    }
}