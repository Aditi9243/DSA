class Solution {
    private int[][] dir = {{-2,-1},{-1,-2},{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1}};

    public double knightProbability(int n, int k, int row, int column) {
        return recursiveFind(n, k, row, column);
    }

    private double recursiveFind(int n, int k, int r, int c)
    {
        if(r < 0 || r > n-1 || c < 0 || c > n-1)
            return 0;
        
        if(k == 0)
            return 1;

        // Probability of each dir = 1/8 = 0.125
        double prob = 0;
        for(int i=0; i<dir.length; i++)
        {
            prob += 0.125 * recursiveFind(n, k-1, r+dir[i][0], c+dir[i][1]);
        }
        return prob;
    }
}

//Dp version
class Solution {
    private int[][] dir = {{-2,-1},{-1,-2},{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1}};
    private double[][][] dp;

    public double knightProbability(int n, int k, int row, int column) {
        dp = new double[n][n][k+1];
        return find(n, k, row, column);
    }

    private double find(int n, int k, int r, int c)
    {
        if(r < 0 || r > n-1 || c < 0 || c > n-1)
            return 0;
        
        if(k == 0)
            return 1;

        if(dp[r][c][k] != 0)
            return dp[r][c][k];

        // Probability of each dir = 1/8 = 0.125
        double prob = 0;
        for(int i=0; i<dir.length; i++)
        {
            prob += 0.125 * find(n, k-1, r+dir[i][0], c+dir[i][1]);
        }

        dp[r][c][k] = prob;
        return prob;
    }
}

//Tabulation Version
class Solution {
    public double knightProbability(int n, int k, int row, int column) {
        int[][] dir = {{1, 2}, {1, -2}, {-1, 2}, {-1, -2}, {2, 1}, {2, -1}, {-2, 1}, {-2, -1}};
        double[][] dp = new double[n][n];
        dp[row][column] = 1;

        for (int i = 1; i <= k; i++) {
            double[][] temp = new double[n][n];
            for (int j = 0; j < n; j++) {
                for (int p = 0; p < n; p++) {
                    for (int v = 0; v < 8; v++) {
                        int x = j + dir[v][0];
                        int y = p + dir[v][1];
                        if (x < 0 || y < 0 || x >= n || y >= n) {
                            continue;
                        }
                        temp[j][p] += dp[x][y];
                    }
                }
            }
            dp = temp;
        }

        double rec = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rec += dp[i][j];
            }
        }

        double res = rec / Math.pow(8, k);
        return res;
    }
}