/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode[] ans = new ListNode[k];
        int len = count(head);
        
        int n = len/k, rem = len%k;
        ListNode node = head, prev = null;
        
        for(int i=0; node != null && i<k; i++, rem--)
        {
            ans[i] = node;
            for(int j=0; j<n+(rem>0 ? 1 : 0); j++)
            {
                prev = node;
                node = node.next;
            }
            prev.next = null;
        }
        return ans;
    }
    
    public int count(ListNode root)
    {
        int l = 0;
        while(root != null)
        {
            root = root.next;
            l++;
        }
        return l;
    }
}

