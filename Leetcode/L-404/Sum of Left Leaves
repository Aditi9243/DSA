/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //Recursive
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null)
            return 0;
        int ans = 0;
        if(root.left != null)
        {
            if(root.left.left == null && root.left.right == null)
                ans += root.left.val;
            else
                ans += sumOfLeftLeaves(root.left);
        }
        
        ans += sumOfLeftLeaves(root.right);
        
        return ans;
    }
}

//Iterative - tle
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null)
            return 0;
        int ans = 0;
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(!st.isEmpty())
        {
            TreeNode node = st.pop();
            if(node.left != null)
            {
                if(node.left.left == null && node.left.right == null)
                    ans += node.left.val;
                else
                    st.push(root.left);
            }
            
            if(node.right != null)
            {
                if(node.right.left != null || node.right.right != null)
                    st.push(node.right);
            }
        }
        
        return ans;
    }
}

//Iterative little bit change - tle
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null)
            return 0;
        int ans = 0;
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(!st.isEmpty())
        {
            TreeNode node = st.pop();
            if(node.left != null)
            {
                if(node.left.left == null && node.left.right == null)
                    ans += node.left.val;
                st.push(root.left);
            }
            
            if(node.right != null)
            {
                st.push(node.right);
            }
        }
        
        return ans;
    }
}

//Morris Traversal???