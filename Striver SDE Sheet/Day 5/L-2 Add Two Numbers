/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode(-1);
        int c = 0;  //carry
        ListNode curr = ans;

        while(l1 != null && l2 != null)
        {
            int sum = l1.val + l2.val + c;
            ListNode temp = new ListNode(sum % 10);
            curr.next = temp;
            c = sum / 10;
            curr = curr.next;
            l1 = l1.next;
            l2 = l2.next;
        }

        while(l1 != null)
        {
            int sum = l1.val + c;
            ListNode temp = new ListNode(sum % 10);
            curr.next = temp;
            c = sum / 10;
            curr = curr.next;
            l1 = l1.next;
        }

        while(l2 != null)
        {
            int sum = l2.val + c;
            ListNode temp = new ListNode(sum % 10);
            curr.next = temp;
            c = sum / 10;
            curr = curr.next;
            l2 = l2.next;
        }

        if(c != 0)
        {
            ListNode temp = new ListNode(c);
            curr.next = temp;
        }

        return ans.next;
    }
}

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode(-1);
        ListNode curr = ans;

        int c = 0;  //carry
        while(l1 != null || l2 != null || c != 0)
        {
            int sum = c;
            if(l1 != null)
            {
                sum += l1.val;
                l1 = l1.next;
            }
                

            if(l2 != null)
            {
                sum += l2.val;
                l2 = l2.next;
            }
                

            ListNode temp = new ListNode(sum % 10);
            curr.next = temp;
            c = sum / 10;
            curr = curr.next;           
        }

        return ans.next;
    }
}

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode(-1);
        ListNode curr = ans;

        int c = 0;  //carry
        while(l1 != null || l2 != null || c != 0)
        {
            if(l1 != null)
            {
                c += l1.val;
                l1 = l1.next;
            }
                

            if(l2 != null)
            {
                c += l2.val;
                l2 = l2.next;
            }
                

            ListNode temp = new ListNode(c % 10);
            curr.next = temp;
            c = c / 10;
            curr = curr.next;           
        }

        return ans.next;
    }
}