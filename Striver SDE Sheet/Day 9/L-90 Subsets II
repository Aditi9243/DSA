class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        helper(ans, nums, new ArrayList<>(), 0);
        return ans;
    }

    private void helper(List<List<Integer>> ans, int[] nums, List<Integer> temp, int start)
    {
        ans.add(new ArrayList<>(temp));
        for(int i=start; i<nums.length; i++)
        {
            if(i > start && nums[i] == nums[i-1])
                continue;
            
            temp.add(nums[i]);
            helper(ans, nums, temp, i+1);
            temp.remove(temp.size()-1);
        }
    }
}

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        ans.add(new ArrayList<>());

        int size = 0, start = 0;
        for(int i=0; i<nums.length; i++)
        {
            if(i > 0 && nums[i] == nums[i-1])
                start = size;
            else start = 0;
            //start = (i > 0 && nums[i] == nums[i-1]) ? size : 0;
            
            size = ans.size();
            for(int j=start; j<size; j++)
            {
                List<Integer> temp = new ArrayList<>(ans.get(j));
                temp.add(nums[i]);
                ans.add(temp);
            }
            
        }
        return ans;
    }
}