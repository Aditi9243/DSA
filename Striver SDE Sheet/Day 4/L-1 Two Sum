//Brute force
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int []ans = new int[2];
        for(int i=0; i<nums.length; i++)
        {
            for(int j=i+1; j<nums.length; j++)
            {
                if(nums[i] + nums[j] == target)
                {
                    ans[0] = i;
                    ans[1] = j;
                    break;
                }
            }
        }

        return ans;
    }
}

//Optimized Solution - Using Hashmap
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int []ans = new int[2];
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            if(hm.containsKey(target-nums[i]))
            {
                ans[0] = hm.get(target-nums[i]);
                ans[1] = i;
                return ans;
            }
            hm.put(nums[i], i);
        }
        return ans;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int []ans = new int[2];
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            if(hm.containsKey(nums[i]))
            {
                ans[0] = hm.get(nums[i]);
                ans[1] = i;
                return ans;
            }
            else
                hm.put(target-nums[i], i);
        }

        return ans;
    }
}