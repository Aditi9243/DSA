// Link - https://www.interviewbit.com/problems/maximum-sum-combinations/

Problem Description

Given two equally sized 1-D arrays A, B containing N integers each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum C valid sum combinations from all the possible sum combinations.

Problem Constraints
1 <= N <= 105
1 <= A[i] <= 105
1 <= C <= N

Input Format
First argument is an one-dimensional integer array A of size N.
Second argument is an one-dimensional integer array B of size N.
Third argument is an integer C.

Output Format
Return a one-dimensional integer array of size C denoting the top C maximum sum combinations.

NOTE: The returned array must be sorted in non-increasing order.

Example Input

Input 1:
 A = [3, 2]
 B = [1, 4]
 C = 2

Input 2:
 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
 C = 4

Example Output

Output 1:
[7, 6]

Output 2:
[10, 9, 9, 8]

Example Explanation

Explanation 1:
 7     (A : 3) + (B : 4)
 6     (A : 2) + (B : 4)

Explanation 2:
 10   (A : 4) + (B : 6)
 9   (A : 4) + (B : 5)
 9   (A : 3) + (B : 6)
 8   (A : 3) + (B : 5)

Hints:
- Sort both the arrays in increasing order and maintain a max heap.
- Add last two elements in the heap and keep moving along the array from the back.

Approach 1 (Naive Algorithm) :
We can use Brute force through all the possible combinations that can be made by taking one element from array A and another from array B and inserting them to a max heap. In a max heap maximum element is at the root node so whenever we pop from max heap we get the maximum element present in the heap. After inserting all the sum combinations we take out K elements from max heap and display it.

Time Complexity : O(N2)
This will not pass under given constraints.

Approach 2 (Sorting, Max heap, Map) :
-Instead of brute forcing through all the possible sum combinations we should find a way to limit our search space to possible candidate sum combinations.
-Sort both arrays array A and array B.
-Create a max heap i.e priority_queue in C++ to store the sum combinations along with the indices of elements from both arrays A and B which make up the sum. Heap is ordered by the sum.
-Initialize the heap with the maximum possible sum combination i.e (A[N – 1] + B[N – 1] where N is the size of array) and with the indices of elements from both arrays (N – 1, N – 1). The tuple inside max heap will be (A[N-1] + B[N – 1], N – 1, N – 1). Heap is ordered by first value i.e sum of both elements.
-Pop the heap to get the current largest sum and along with the indices of the element that make up the sum. Let the tuple be (sum, i, j).
-Next insert (A[i – 1] + B[j], i – 1, j) and (A[i] + B[j – 1], i, j – 1) into the max heap but make sure that the pair of indices i.e (i – 1, j) and (i, j – 1) are not already present in the max heap. To check this we can use set in C++.
-Go back to 4 until K times.

Time Complexity : O(NlogN) assuming C <= N

//Brute force
import java.util.*;

public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        int[] ans = new int[C];
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        
        for (int i = 0; i < A.length; i++) 
        {
            for (int j = 0; j < B.length; j++) {
                maxHeap.offer(A[i] + B[j]);
            }
        }
        
        for (int i = 0; i < C; i++) 
        {
            ans[i] = maxHeap.poll();
        }
        
        return ans;
    }
}

//Code based on second approach
public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        
        int N = A.length;
        Arrays.sort(A);
        Arrays.sort(B);
        
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> (b[0] - a[0]));
        Set<String> visited = new HashSet<>();
        
        maxHeap.offer(new int[]{A[N - 1] + B[N - 1], N - 1, N - 1});
        visited.add((N - 1) + "-" + (N - 1));
        
        int[] ans = new int[C];
        int k = 0;
        
        while (k < C) {
            int[] curr = maxHeap.poll();
            int sum = curr[0];
            int i = curr[1];
            int j = curr[2];
            
            ans[k++] = sum;
            
            if (i > 0 && !visited.contains((i - 1) + "-" + j)) {
                maxHeap.offer(new int[]{A[i - 1] + B[j], i - 1, j});
                visited.add((i - 1) + "-" + j);
            }
            
            if (j > 0 && !visited.contains(i + "-" + (j - 1))) {
                maxHeap.offer(new int[]{A[i] + B[j - 1], i, j - 1});
                visited.add(i + "-" + (j - 1));
            }
        }
        
        return ans;
        
        
    }
}


//Code passed all test cases
class A1{
    int sum;
    int i;
    int j;
    A1(int s,int i1,int j1){
        sum=s;
        i=i1;
        j=j1;
    }
}

class solComparator implements Comparator<A1>{
    public int compare(A1 p1,A1 p2){
        if(p1.sum<p2.sum)
            return 1;
        else if(p1.sum>p2.sum)
            return -1;
        else
             return 0;
    }
}

public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        
        int n=A.length;
        
        PriorityQueue<A1> p=new PriorityQueue<A1>(new solComparator()); 
        Arrays.sort(A);
        Arrays.sort(B);
            
        HashSet<String> hs=new HashSet<>();
        p.add(new A1(A[n-1]+B[n-1],n-1,n-1));
        hs.add(new String((n-1)+" "+(n-1)));
        
        int i=n-1,j=n-1;
        int k1=C;
            
        int ans[]=new int[C];
        int y=0;
            
        for(int p1=0;p1<C;p1++)
        {
            ans[y]=p.peek().sum;
            y++;
            
            i=p.peek().i;
            j=p.peek().j;
            p.poll();
            
            if(i>0&&j>0){
                if(!hs.contains(new String((i-1)+" "+j))){
                    p.add(new A1(A[i-1]+B[j],i-1,j));
                    hs.add(new String((i-1)+" "+j));
                }
                
                if(!hs.contains(new String(i+" "+(j-1))))
                {
                    p.add(new A1(A[i]+B[j-1],i,j-1));
                    hs.add(new String(i+" "+(j-1)));
                }
            }
            
        }
            
        return ans;
    }
}

