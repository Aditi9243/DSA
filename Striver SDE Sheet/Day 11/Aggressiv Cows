//Link - https://www.spoj.com/problems/AGGRCOW/

Problem Statement
// Farmer John has built a new long barn, with N (2 <= N <= 100,000) stalls. The stalls are located along a straight line at positions x1 ... xN (0 <= xi <= 1,000,000,000).
// His C (2 <= C <= N) cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?

Input
t â€“ the number of test cases, then t test cases follows.
* Line 1: Two space-separated integers: N and C
* Lines 2..N+1: Line i+1 contains an integer stall location, xi

Output
For each test case output one integer: the largest minimum distance.

Example
Input:
1
5 3
1
2
8
4
9

Output:
3

Output details:
FJ can put his 3 cows in the stalls at positions 1, 4 and 8,
resulting in a minimum distance of 3.

//Code
import java.util.*;
public class tUf {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }

    //Linear Search
    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int limit = stalls[n - 1] - stalls[0];
        for (int i = 1; i <= limit; i++) {
            if (canWePlace(stalls, i, k) == false) {
                return (i - 1);
            }
        }
        return limit;
    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
		int t = scn.nextInt();  //Number of test cases
		while(t-- > 0)
		{
			int n = scn.nextInt();  //Number of stalls
			int c = scn.nextInt();  //Number of cows
			
			int[] arr = new int[n]; //Stalls array
			for(int i=0; i<n; i++)
			{
				arr[i] = scn.nextInt();
			}
			
			int ans = aggressiveCows(arr, c);
			System.out.println(ans);
		}
    }
}

//Binary Search
public static int aggressiveCows(int[] stalls, int k) {
    int n = stalls.length; //size of array

    //sort the stalls[]:
    Arrays.sort(stalls);

    int low = 1, high = stalls[n - 1] - stalls[0];

    //apply binary search:
    while (low <= high) {
        int mid = (low + high) / 2;
        if (canWePlace(stalls, mid, k) == true) 
        {
            low = mid + 1;
        } 
        else 
            high = mid - 1;
    }
    return high;
}