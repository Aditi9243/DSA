//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-->0)
        {
            StringTokenizer stt = new StringTokenizer(br.readLine());
            
            int n = Integer.parseInt(stt.nextToken());
            int m = Integer.parseInt(stt.nextToken());
            int k = Integer.parseInt(stt.nextToken());
            int a[] = new int[(int)(n)];
            int b[] = new int[(int)(m)];
            
            
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(inputLine[i]);
            }
            String inputLine1[] = br.readLine().trim().split(" ");
            for (int i = 0; i < m; i++) {
                b[i] = Integer.parseInt(inputLine1[i]);
            }
            
            
            Solution obj = new Solution();
            System.out.println(obj.kthElement( a, b, n, m, k));
            
        }
	}
}

// } Driver Code Ends


//User function Template for Java
class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        //1. Create new array
        int[] nums = new int[n+m];

        //2. Merge both arrays to one
        int x = 0;
        for(int i=0; i<n; )
        {
            nums[x++] = arr1[i++];
        }

        for(int i=0; i<m; )
        {
            nums[x++] = arr2[i++];
        }

        //3. Sort the array
        Arrays.sort(nums);

        return nums[k-1];
        
    }
}

Time Complexity : O(n + m + (n + m)log(n + m))
Space Complexity : O(n + m)

class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        //1. Create new array
        int[] nums = new int[n+m];

        //2. Merge both arrays to one with sorting
        int x = 0, i = 0, j = 0;
        while(i < n && j < m)
        {
            if(arr1[i] < arr2[j])
            {
                nums[x++] = arr1[i++];
            }
            else
                nums[x++] = arr2[j++];
        }

        while(i < n)
        {
            nums[x++] = arr1[i++];
        }

        while(j < m)
        {
            nums[x++] = arr2[j++];
        }

        return nums[k-1];
    }
}

Time Complexity : O(n + m)
Space Complexity : O(n + m)

//Without extra space
class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        int ans = -1;

        //Find kth element while merging and sorting both arrays
        int x = 0, i = 0, j = 0;
        while(i < n && j < m && k != 0)
        {
            if(arr1[i] < arr2[j])
            {
                ans = arr1[i++];
            }
            else
                ans = arr2[j++];
            k--;
        }

        while(i < n && k != 0)
        {
            ans = arr1[i++];
            k--;
        }

        while(j < m && k != 0)
        {
            ans = arr2[j++];
            k--;
        }

        return ans;
        
    }
}

Time Complexity : O(n + m)
Space Complexity : O(1)