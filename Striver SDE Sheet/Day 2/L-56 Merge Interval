class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b) -> {
            return a[0] - b[0];
        }); //Step 1. Sorting based on first element

        Stack<int[]> st = new Stack<>();
        st.push(intervals[0]);  //Step 2. Push the first element

        for(int i=0; i<intervals.length; i++)
        {
            int[] temp = st.pop();  //Step 3. Pop topmost element
            int s1 = temp[0];
            int e1 = temp[1];

            int s2 = intervals[i][0];
            int e2 = intervals[i][1];

            if(s2 <= e1)    //Step 4. Compare the ending of first pair and stating of second pair
            {
                int em = Math.max(e1, e2);
                int[] pair = {s1, em};
                st.push(pair);
            }
            else {
                st.push(temp);
                st.push(intervals[i]);
            }
        }

        int [][] ans = new int[st.size()][2];
        for(int i=ans.length-1; i>=0; i--)
        {
            int[] t = st.pop();
            ans[i][0] = t[0];
            ans[i][1] = t[1];
        }

        return ans;
    }
}