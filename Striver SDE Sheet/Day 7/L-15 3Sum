class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);

        for(int i=0; i<nums.length; i++)
        {
            if(i>0 && nums[i] == nums[i-1])
                continue;

            int j = i+1, k = nums.length-1;
            int target = -nums[i];
            while(j < k)
            {
                if(nums[j] + nums[k] == target)
                {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    ans.add(temp);

                    j++;
                    k--;

                    while(j<k && nums[j] == nums[j-1])   j++;
                    while(j<k && nums[k] == nums[k+1])  k--;
                }
                else if(nums[j] + nums[k] < target)
                    j++;
                else
                    k--;
            }
        }

        return ans;
    }
}

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);

        for(int i=0; i<nums.length-2 && nums[i] <= 0; i++)
        {
            if(i>0 && nums[i] == nums[i-1])
                continue;

            int j = i+1, k = nums.length-1;
            int target = -nums[i];
            while(j < k)
            {
                if(nums[j] + nums[k] == target)
                {
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;

                    while(j<k && nums[j] == nums[j-1])   j++;
                    while(j<k && nums[k] == nums[k+1])  k--;
                }
                else if(nums[j] + nums[k] < target)
                    j++;
                else
                    k--;
            }
        }

        return ans;
    }
}