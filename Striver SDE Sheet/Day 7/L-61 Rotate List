/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private int count(ListNode node)
    {
        int count = 0;
        while(node != null)
        {
            node = node.next;
            count++;
        }
        return count;
    }

    public ListNode rotateRight(ListNode head, int k) {
        int len = count(head);
        if(head == null || head.next == null || k == 0 || k%len == 0)
            return head;

        k %= len;

        ListNode slow = head;
        ListNode fast = head;

        for(int i=0; i<len-k-1; i++)
        {
            slow = slow.next;
        }

        fast = slow.next;
        slow.next = null;

        ListNode temp = fast;
        while(fast != null && fast.next != null)
        {
            fast = fast.next;
        }
        
        fast.next = head;
        head = temp;
        return head;
    }
}