class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = nums[0];
        int ans = 0;
        for(int i=1; i<nums.length; i++)
        {
            if(nums[i] == 1)
            {
                count++;
            }
            else
            {
                ans = Math.max(ans, count);
                count = 0;
            }
        }
        ans = Math.max(ans, count);
        return ans;
    }
}

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0;
        int ans = 0;
        for(int num : nums)
        {
            count = (num == 0) ? 0 : count+1;
            ans = Math.max(ans, count);
        }
        return ans;
    }
}

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = nums[0];
        int ans = count;
        for(int i=1; i<nums.length; i++)
        {
            if(nums[i] == 1)
            {
                ans = Math.max(ans, ++count);
            }
            else
            {
                count = 0;
            }
        }

        return ans;
    }
}

//Sliding Window
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int ans = 0, start = 0;
        for(int end=0; end<nums.length; end++)
        {
            if(nums[end] == 1)
            {
                ans = Math.max(ans, end-start+1);
            }
            else
            {
                start = end+1;
            }
        }

        return ans;
    }
}

//Simple Arithmetic way without counting
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int sum = 0;
        int ans = 0;
        for(int num : nums)
        {
            sum = sum*num + num;
            ans = Math.max(ans, sum);
        }
        return ans;
    }
}