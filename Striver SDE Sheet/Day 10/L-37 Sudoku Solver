class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    private boolean solve(char[][] board)
    {
        for(int i=0; i<board.length; i++)
        {
            for(int j=0; j<board.length; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char num='1'; num<='9'; num++)
                    {
                        //Trying every number
                        if(isValid(board, i, j, num))
                        {
                            board[i][j] = num; //Put num for this cell

                            //Check whether putting this value we can solve the sudoku or not
                            //If it is the solution, return true else go back - empty the place
                            if(solve(board))
                                return true;    
                            else
                                board[i][j] = '.';
                        }
                    }

                    return false;
                }
            }
        }

        return true;
    }

    private boolean isValid(char[][] board, int row, int col, char num)
    {
        //Block Number = i/3 => This mean first element = i/3 * 3
        int blockRow = (row/3)*3;
        int blockCol = (col/3)*3;

        for(int i=0; i<board.length; i++)
        {
            //1. Check row
            if(board[i][col] != '.' && board[i][col] == num)
                return false;

            //2. Check column
            if(board[row][i] != '.' && board[row][i] == num)
                return false;

            //3. Check Block
            if(board[blockRow + i / 3][blockCol + i % 3] == num)
                return false;
        }

        return true;
    }
}

//=======================================================================================================================
//Change in isValid function()
    private boolean isValid(char[][] board, int row, int col, char num)
    {
        //Block Number = i/3 => This mean first element = i/3 * 3
        int blockRow = (row/3)*3;
        int blockCol = (col/3)*3;

        for(int i=0; i<board.length; i++)
        {
            //Check row, column and block
            if(board[i][col] == num || board[row][i] == num || board[blockRow + i / 3][blockCol + i % 3] == num)
                return false;
        }

        return true;
    }