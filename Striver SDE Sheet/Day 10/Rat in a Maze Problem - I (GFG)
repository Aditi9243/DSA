//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}

// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    static int[] dx = {1, 0, 0, -1};
    static int[] dy = {0, -1, 1, 0};
    static char[] dir = {'D', 'L', 'R', 'U'};
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> ans = new ArrayList<>();
        if(m[0][0] != 0)
            findPath(m, 0, 0, "", ans);
            
        return ans;
    }
    
    private static void findPath(int[][] m, int r, int c, String path, ArrayList<String> ans)
    {
        //base case
        if(r == m.length-1 && c == m.length-1)
        {
            ans.add(path);
            return;
        }
        
        //4 direction choices
        for(int i=0; i<4; i++)
        {
            int x = r + dx[i];
            int y = r + dy[i];
            
            if(x >= 0 && y >= 0 && x < m.length && y < m.length && m[x][y] != 0)
            {
                m[r][c] = 0;
                findPath(m, x, y, path+dir[i], ans);
                m[r][c] = 1;
            }
        }
    }
}

//Optimized Solution
// m is the given matrix and n is the order of matrix
class Solution {
    static int[] dx = {1, 0, 0, -1};
    static int[] dy = {0, -1, 1, 0};
    static char[] dir = {'D', 'L', 'R', 'U'};
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> ans = new ArrayList<>();
        if(m[0][0] == 0)
            return ans;

        findPath(m, 0, 0, "", ans);
        return ans;
    }
    
    private static void findPath(int[][] m, int r, int c, String path, ArrayList<String> ans)
    {
        //base case
        if(r == m.length-1 && c == m.length-1)
        {
            ans.add(path);
            return;
        }
        
        //4 direction choices
        //1. Down
        if(r != (m.length-1) && m[r+1][c] == 1)
        {
            m[r][c] = 0;
            findPath(m, r+1, c, path+"D", ans);
            m[r][c] = 1;
        }
        
        //2. Left
        if(c != 0 && m[r][c-1] == 1)
        {
            m[r][c] = 0;
            findPath(m, r, c-1, path+"L", ans);
            m[r][c] = 1;
        }
        
        //3. Right
        if(c != (m.length-1) && m[r][c+1] == 1)
        {
            m[r][c] = 0;
            findPath(m, r, c+1, path+"R", ans);
            m[r][c] = 1;
        }
        
        //4. Up
        if(r != 0 && m[r-1][c] == 1)
        {
            m[r][c] = 0;
            findPath(m, r-1, c, path+"U", ans);
            m[r][c] = 1;
        }
    }
}