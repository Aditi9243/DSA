//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int tc = scan.nextInt();

        while (tc-- > 0) {
            int N = scan.nextInt();
            int M = scan.nextInt();
            int E = scan.nextInt();

            boolean graph[][] = new boolean[N][N];

            for (int i = 0; i < E; i++) {
                int u = scan.nextInt() - 1;
                int v = scan.nextInt() - 1;
                graph[u][v] = true;
                graph[v][u] = true;
            }

            System.out.println(new solve().graphColoring(graph, M, N) ? 1 : 0);
        }
    }
}

// } Driver Code Ends


class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        int[] color = new int[n];
        //Color is 0 to all nodes
        return solve(0, color, graph, m, n);
    }
    
    private boolean solve(int node, int[] color, boolean graph[][], int m, int n)
    {
        if(node == n)
            return true;
         
        //Try color 1 to m for each node   
        for(int i=1; i<=m; i++)
        {
            if(isSafe(node, color, graph, n, i))
            {
                //fill the curr node with ith color
                color[node] = i;
                
                //move to next node, if it can fill then no nee to revert the fill color back
                if(solve(node+1, color, graph, m, n))
                    return true;
                
                //remove the prev color filled to this node
                color[node] = 0;
            }
        }
        
        return false;
    }
    
    private boolean isSafe(int node, int[] colors, boolean[][] graph, int n, int color)
    {
        //Check whether a particular color can be applied to the node

        //Get all the current node
        for(int i=0; i<n; i++)
        {
            //if the adjacent node of current node color is same
            //then we don't want to fill the same color
            if(i != node && graph[i][node] == true && colors[i] == color)
            {
                return false;
            }
        }
        
        return true;
    }
}