//TLE
class Solution {
    public int reversePairs(int[] nums) {
        int count = 0;
        for(int i=0; i<nums.length; i++)
        {
            for(int j=i+1; j<nums.length; j++)
            {
                if(nums[i] > 2*(long)nums[j])
                {
                    count++;
                }
            }
        }
        return count;
    }
}

class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }

    private int mergeSort(int[] nums, int start, int end)
    {
        if(start >= end)
            return 0;

        int mid = start + (end-start)/2;

        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid+1, end);
        for(int i = start, j = mid+1; i<=mid; i++)
        {
            while(j <= end && nums[i] > 2*(long)nums[j])
                j++;
            
            count += j - (mid+1);
        }

        Arrays.sort(nums, start, end+1);
        return count;
    }
}

class Solution {
    int [] helper;
    public int reversePairs(int[] nums) {
        this.helper = new int[nums.length];
        return mergeSort(nums, 0, nums.length-1);
    }

    private int mergeSort(int[] nums, int start, int end)
    {
        if(start >= end)
            return 0;

        int mid = start + (end-start)/2;

        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid+1, end);
        for(int i = start, j = mid+1; i<=mid; i++)
        {
            while(j <= end && nums[i] > 2*(long)nums[j])
                j++;
            
            count += j - (mid+1);
        }

        //Arrays.sort(nums, start, end+1);
        merge(nums, start, mid, end);
        return count;
    }

    private void merge(int[] nums, int start, int mid, int end)
    {
        for(int i = start; i<=end; i++)
            helper[i] = nums[i];

        int p1 = start; //pointer for left part
        int p2 = mid+1; //pointer for right part

        int i = start;
        while(p1 <= mid || p2 <= end)
        {
            if(p1 > mid || (p2 <= end && helper[p1] >= helper[p2]))
            {
                nums[i++] = helper[p2++];
            }
            else
            {
                nums[i++] = helper[p1++];
            }
        }
    }
}