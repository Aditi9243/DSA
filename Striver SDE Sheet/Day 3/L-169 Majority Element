class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int count = 0, num = nums[0];
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] == num)
            {
                count++;
                if(count > nums.length/2)   return num;
            }

            else
            {
                count = 1;
                num = nums[i];
            }
        }

        return -1;
    }
}

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);

        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            int val = hm.getOrDefault(nums[i], 0);
            hm.put(nums[i], val+1);
        }

        for(Map.Entry<Integer, Integer> e : hm.entrySet())
        {
            if(e.getValue() > nums.length/2)
            {
                return e.getKey();
            }
        }

        return -1;
    }
}

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            hm.put(nums[i], hm.getOrDefault(nums[i], 0)+1);
        }

        for(int x : hm.keySet())
        {
            if(hm.get(x) > nums.length/2)
            {
                return x;
            }
        }

        return -1;
    }
}

//Boyerâ€“Moore majority vote algorithm
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int count = 1, num = nums[0];
        for(int i=1; i<nums.length; i++)
        {
            if(count == 0)
            {
                count++;
                num = nums[i];
            }
            
            else if(num == nums[i])
            {
                count++;
            }
            
            else
                count--;
        }
        
        return num;
    }
}