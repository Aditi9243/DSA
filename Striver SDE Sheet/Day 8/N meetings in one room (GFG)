//Problem - https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    static class Activity {
        int i;
        int start;
        int end;
        
        Activity(int a, int b, int c)
        {
            i = a;
            start = b;
            end = c;
        }
    }
    
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        
        PriorityQueue<Activity> pq = new PriorityQueue<>((a,b) -> a.end - b.end);
        for(int i=0; i<n; i++)
        {
            pq.add(new Activity(i, start[i], end[i]));
        }
        
        int count = 1;
        Activity temp = pq.remove();
        int prev = temp.end;
        
        while(!pq.isEmpty())
        {
            Activity t = pq.remove();
            if(t.start > prev)
            {
                count++;
                prev = t.end;
            }
        }
        
        return count;
    }
}

//Time Complexity = O(n) + O(n logn) + O(n) => O(n logn)
class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    static class meeting {
        int pos;
        int start;
        int end;
        
        meeting(int pos, int start, int end)
        {
            this.pos = pos;
            this.start = start;
            this.end = end;
        }
    }
    
    static class meetingComparator implements Comparator<meeting>
    {
        @Override
        public int compare(meeting a, meeting b)
        {
            if(a.end < b.end)
                return -1;
            else if(a.end > b.end)
                return 1;
            else if(a.pos < b.pos)
                return -1;
            else return 1;
        }
    }
    
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        
        ArrayList<meeting> meet = new ArrayList<>();
        
        for(int i=0; i<n; i++)
        {
            meet.add(new meeting(i+1, start[i], end[i]));
        }
        
        meetingComparator mc = new meetingComparator();
        Collections.sort(meet, mc);
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(meet.get(0).pos);
        int limit = meet.get(0).end;
        
        for(int i=1; i<n; i++)
        {
            if(meet.get(i).start > limit)
            {
                limit = meet.get(i).end;
                ans.add(meet.get(i).pos);
            }
        }
        
        return ans.size();
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        
        int meeting[][] = new int[n][3];
        for(int i=0; i<n; i++)
        {
            meeting[i][0] = i;
            meeting[i][1] = start[i];
            meeting[i][2] = end[i];
        }
        
        Arrays.sort(meeting, Comparator.comparingDouble(m -> m[2]));
        
        int count = 1;
        int limit = meeting[0][2];
        for(int i=1; i<n; i++)
        {
            if(meeting[i][1] > limit)
            {
                count++;
                limit = meeting[i][2];
            }
        }
        
        return count;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    static class meeting {
        int pos;
        int start;
        int end;
        
        meeting(int pos, int start, int end)
        {
            this.pos = pos;
            this.start = start;
            this.end = end;
        }
    }
    
    static class meetingComparator implements Comparator<meeting>
    {
        @Override
        public int compare(meeting a, meeting b)
        {
            if(a.end < b.end)
                return -1;
            else return 1;
        }
    }
    
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        
        ArrayList<meeting> meet = new ArrayList<>();
        
        for(int i=0; i<n; i++)
        {
            meet.add(new meeting(i+1, start[i], end[i]));
        }
        
        meetingComparator mc = new meetingComparator();
        Collections.sort(meet, mc);
        int count = 1;
        int limit = meet.get(0).end;
        
        for(int i=1; i<n; i++)
        {
            if(meet.get(i).start > limit)
            {
                limit = meet.get(i).end;
                count++;
            }
        }
        
        return count;
    }
}



class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    static class meeting {
        int pos;
        int start;
        int end;
        
        meeting(int pos, int start, int end)
        {
            this.pos = pos;
            this.start = start;
            this.end = end;
        }
    }
    
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        
        ArrayList<meeting> meet = new ArrayList<>();
        
        for(int i=0; i<n; i++)
        {
            meet.add(new meeting(i+1, start[i], end[i]));
        }
        
        meet.sort((a, b) -> Integer.compare(a.end, b.end));

        int count = 1;
        int limit = meet.get(0).end;
        
        for(int i=1; i<n; i++)
        {
            if(meet.get(i).start > limit)
            {
                limit = meet.get(i).end;
                count++;
            }
        }
        
        return count;
    }
}