//Problem - https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

//{ Driver Code Starts
    import java.io.*;
    import java.lang.*;
    import java.util.*;
    
    class Job {
        int id, profit, deadline;
        Job(int x, int y, int z){
            this.id = x;
            this.deadline = y;
            this.profit = z; 
        }
    }
    
    class GfG {
        public static void main(String[] args) throws IOException{
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            
            //testcases
            int t = Integer.parseInt(br.readLine().trim());
            while(t-->0){
                String inputLine[] = br.readLine().trim().split(" ");
                
                //size of array
                int n = Integer.parseInt(inputLine[0]);
                Job[] arr = new Job[n];
                inputLine = br.readLine().trim().split(" ");
                
                //adding id, deadline, profit
                for(int i=0, k=0; i<n; i++){
                    arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
                }
                
                Solution ob = new Solution();
                
                //function call
                int[] res = ob.JobScheduling(arr, n);
                System.out.println (res[0] + " " + res[1]);
            }
        }
    }
    // } Driver Code Ends
    
    
    class Solution
    {
        //Function to find the maximum profit and the number of jobs done.
        int[] JobScheduling(Job arr[], int n)
        {
            // Your code here
            PriorityQueue<Job> pq = new PriorityQueue<>((a,b) -> b.profit-a.profit);
            
            for(Job j : arr)
            {
                pq.add(j);
            }
            
            int maxDeadline = 0;
            for(int i=0; i<n; i++)
            {
                maxDeadline = Math.max(maxDeadline, arr[i].deadline);
            }
            
            int count = 0; 
            int maxProfit = 0;
            boolean visited[] = new boolean[maxDeadline+1];
            while(!pq.isEmpty())
            {
                Job temp = pq.remove();
                int d = temp.deadline;
                
                for(int i=d; i>0; i--)
                {
                    if(!visited[i])
                    {
                        count++;
                        visited[i] = true;
                        maxProfit += temp.profit;
                        break;
                    }
                }
            }
            
            int ans[] = new int[2];
            ans[0] = count;
            ans[1] = maxProfit;
            return ans;
        }
    }
    
    /*
    class Job {
        int id, profit, deadline;
        Job(int x, int y, int z){
            this.id = x;
            this.deadline = y;
            this.profit = z; 
        }
    }
    */

//Without priority Queue
    class Solution
    {
        //Function to find the maximum profit and the number of jobs done.
        int[] JobScheduling(Job arr[], int n)
        {
            // Your code here
            Arrays.sort(arr, new Comparator<Job>(){
                public int compare(Job a, Job b)
                {
                    return Integer.compare(b.profit, a.profit);
                }
            });
            //Arrays.sort(arr, (a, b) -> (b.profit - a.profit));
            
            int maxDeadline = 0;
            for(int i=0; i<n; i++)
            {
                maxDeadline = Math.max(maxDeadline, arr[i].deadline);
            }
            
            int count = 0; 
            int maxProfit = 0;
            boolean visited[] = new boolean[maxDeadline];
            for(int i=0; i<n; i++)
            {
                for(int j=arr[i].deadline-1; j>=0; j--)
                {
                    if(!visited[j])
                    {
                        count++;
                        visited[j] = true;
                        maxProfit += arr[i].profit;
                        break;
                    }
                }
            }
            
            int ans[] = new int[2];
            ans[0] = count;
            ans[1] = maxProfit;
            return ans;
        }
    }