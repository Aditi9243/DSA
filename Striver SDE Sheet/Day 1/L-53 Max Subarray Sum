//Kadane Algorithm

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = 0;
        int max = nums[0];  //max_so_far

        for(int i=0; i<nums.length; i++)
        {
            sum += nums[i];
            max = Math.max(sum, max);

            if(sum < 0)
                sum = 0;            
        }

        return max;
    }
}

//Another way of writing
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int maxEndingHere = nums[0];
        
        for(int i=1; i<nums.length; i++)
        {
            maxEndingHere = Math.max(maxEndingHere+nums[i], nums[i]);
            max = Math.max(max, maxEndingHere);
        }
        
        return max;
    }
}

//DP solution
class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int []dp = new int[n];
        dp[0] = nums[0];
        int max = dp[0];
        
        for(int i=1; i<n; i++)
        {
            dp[i] = nums[i] + (dp[i-1]>0 ? dp[i-1]:0);
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
}

//Variation 
//1. Length of the max subarray
//2. Elements of the max subarray
//3. Start and End index of max subarray

//3rd Variation - other variations can be achieved by changing this code
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];  //Integer.MIN_VALUE
        int sum = 0;
        int start = 0, end = 0;
        int tempStart = 0;
        
        for(int i=0; i<nums.length; i++)
        {
            sum += nums[i]; 
            // max = Math.max(max, sum);

            if(sum > max)
            {
                max = sum;
                start = tempStart;
                end = i;
            }
            
            if(sum < 0)
            {
                sum = 0;
                tempStart = i+1;
            }    
        }
        
        return max;
    }
}
