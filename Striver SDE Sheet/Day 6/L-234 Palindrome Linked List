/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode left;
    public boolean isPalindrome(ListNode head) {
        if(head == null)
            return true;
        
        ListNode right = head;
        left = head;
        return helper(right);
    }

    private boolean helper(ListNode right)
    {
        if(right == null)
            return true;

        boolean recAns = helper(right.next);
        if(recAns == false)
            return false;
        
        boolean ans;
        if(left.val == right.val)
            ans = true;
        else
            ans = false;

        left = left.next;
        return ans;
    }
}

class Solution {
    ListNode left;
    public boolean isPalindrome(ListNode head) {
        left = head;
        return helper(head);
    }

    private boolean helper(ListNode right)
    {
        if(right == null)
            return true;

        boolean recAns = helper(right.next);
        
        boolean ans = (left.val == right.val);
        
        left = left.next;
        return ans && recAns;
    }
}

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode temp = head;
        Stack<Integer> st = new Stack<>();
        while(temp != null)
        {
            st.push(temp.val);
            temp = temp.next;
        }

        while(head != null)
        {
            if(head.val != st.pop())
            {
                return false;
            }

            head = head.next;
        }

        return true;
    }
}

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        Stack<Integer> st = new Stack<>();
        while(fast != null && fast.next != null)
        {
            st.push(slow.val);
            slow = slow.next;
            fast = fast.next.next;
        }

        //if length is odd
        if(fast != null)
            slow = slow.next;

        //comparing second half of linkedlist
        while(slow != null)
        {
            if(slow.val != st.pop())
            {
                return false;
            }

            slow = slow.next;
        }

        return true;
    }
}

class Solution {
    ListNode left;
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }

        if(fast != null)
            slow = slow.next;

        slow = reverse(slow);   //reversing the second half of linkedlist - end of linkedlist
        fast = head;    //pointing the begining of linkedlist

        while(slow != null)
        {
            if(slow.val != fast.val)
                return false;

            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
    }

    private ListNode reverse(ListNode curr)
    {
        ListNode prev = null;
        while(curr != null)
        {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}

class Solution {
    ListNode left;
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode prev = slow;
        slow = slow.next;
        prev.next = null;
        
        //reversing the second half of linkedlist
        while(slow != null)
        {
            ListNode temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }

        slow = prev;   //pointing the end of linkedlist
        fast = head;    //pointing the begining of linkedlist

        while(slow != null)
        {
            if(slow.val != fast.val)
                return false;

            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
    }
}